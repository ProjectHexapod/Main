                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _transfer_offset_valid::
 0000                   .blkb 1
                        .area idata(rom,lit)
 0000 00                .byte 0
                        .area data(ram, con, rel)
 0001                   .dbfile ./main.c
 0001                   .dbfile C:\DOCUME~1\ADMINI~1\mycroft\hexapod\Firmware\VALVED~1\VALVED~1\main.c
 0001                   .dbsym e transfer_offset_valid _transfer_offset_valid c
 0001           _ext_mem_locked::
 0001                   .blkb 1
                        .area idata(rom,lit)
 0001 00                .byte 0
                        .area data(ram, con, rel)
 0002                   .dbfile C:\DOCUME~1\ADMINI~1\mycroft\hexapod\Firmware\VALVED~1\VALVED~1\main.c
 0002                   .dbsym e ext_mem_locked _ext_mem_locked c
                        .area text(rom, con, rel)
 0000                   .dbfile C:\DOCUME~1\ADMINI~1\mycroft\hexapod\Firmware\VALVED~1\VALVED~1\main.c
 0000                   .dbfunc e main _main fV
 0000           _main::
 0000                   .dbline -1
 0000                   .dbline 27
 0000           ; //----------------------------------------------------------------------------
 0000           ; // C main line
 0000           ; //----------------------------------------------------------------------------
 0000           ; 
 0000           ; #include <m8c.h>        // part specific constants and macros
 0000           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0000           ; 
 0000           ; unsigned char target_address;
 0000           ; unsigned char expected_bytes;
 0000           ; unsigned char transfer_offset_valid = 0;
 0000           ; unsigned char transfer_flags, transfer_offset;
 0000           ; 
 0000           ; unsigned char ext_mem_locked = 0;
 0000           ; /********
 0000           ; m_to_s_memory map
 0000           ; 0:  Desired PWM duty cycle, channel 0
 0000           ; 1:  Desired PWM duty cycle, channel 1
 0000           ; ********/
 0000           ; unsigned char m_to_s_mem[32];
 0000           ; /********
 0000           ; s_to_m_memory map
 0000           ; 31: Device type (0xd1=valve driver, 0xe2=angle encoder)
 0000           ; ********/
 0000           ; unsigned char s_to_m_mem[32];
 0000           ; 
 0000           ; void main(void)
 0000           ; {
 0000                   .dbline 28
 0000           ;     s_to_m_mem[31] = 0xd1;
 0000 551FD1            mov [_s_to_m_mem+31],-47
 0003                   .dbline 30
 0003           ;       
 0003           ;       M8C_EnableGInt;
 0003 7101                      or  F, 01h
 0005           
 0005                   .dbline 31
 0005           ;       UART_EnableInt();
 0005 10                push X
 0006 7C0000            xcall _UART_EnableInt
 0009                   .dbline 32
 0009           ;       UART_Start(UART_PARITY_NONE);
 0009 5000              mov A,0
 000B 7C0000            xcall _UART_Start
 000E                   .dbline 33
 000E           ;       PWM8_1_DisableInt();
 000E 7C0000            xcall _PWM8_1_DisableInt
 0011                   .dbline 34
 0011           ;       PWM8_1_Start();
 0011 7C0000            xcall _PWM8_1_Start
 0014                   .dbline 35
 0014           ;       PWM8_2_DisableInt();
 0014 7C0000            xcall _PWM8_2_DisableInt
 0017                   .dbline 36
 0017           ;       PWM8_2_Start();
 0017 7C0000            xcall _PWM8_2_Start
 001A 20                pop X
 001B 800D              xjmp L4
 001D           L3:
 001D                   .dbline 38
 001D           ;       while(1)
 001D           ;       {
 001D                   .dbline 39
 001D           ;               PWM8_1_WritePulseWidth(m_to_s_mem[0]);
 001D 10                push X
 001E 5120              mov A,[_m_to_s_mem]
 0020 7C0000            xcall _PWM8_1_WritePulseWidth
 0023                   .dbline 40
 0023           ;               PWM8_2_WritePulseWidth(m_to_s_mem[1]);
 0023 5121              mov A,[_m_to_s_mem+1]
 0025 7C0000            xcall _PWM8_2_WritePulseWidth
 0028 20                pop X
 0029                   .dbline 41
 0029           ;       }
 0029           L4:
 0029                   .dbline 37
 0029 8FF3              xjmp L3
 002B           X0:
 002B                   .dbline -2
 002B           L1:
 002B                   .dbline 0 ; func end
 002B 8FFF              jmp .
 002D                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile C:\DOCUME~1\ADMINI~1\mycroft\hexapod\Firmware\VALVED~1\VALVED~1\main.c
 0000           _s_to_m_mem::
 0000                   .blkb 32
 0020                   .dbsym e s_to_m_mem _s_to_m_mem A[32:32]c
 0020           _m_to_s_mem::
 0020                   .blkb 32
 0040                   .dbsym e m_to_s_mem _m_to_s_mem A[32:32]c
 0040           _transfer_offset::
 0040                   .blkb 1
 0041                   .dbsym e transfer_offset _transfer_offset c
 0041           _transfer_flags::
 0041                   .blkb 1
 0042                   .dbsym e transfer_flags _transfer_flags c
 0042           _expected_bytes::
 0042                   .blkb 1
 0043                   .dbsym e expected_bytes _expected_bytes c
 0043           _target_address::
 0043                   .blkb 1
 0044                   .dbsym e target_address _target_address c
