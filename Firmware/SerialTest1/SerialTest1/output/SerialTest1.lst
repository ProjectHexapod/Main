FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.2.2401
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#890 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.21
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C24xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 	
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116) 
                                        (0117)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0118)     halt                           ;Stop execution if power falls too low
                                        (0119) 
                                        (0120)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0121)     // call	void_handler
0008: 7E       RETI                     (0122)     reti
                                        (0123) 
                                        (0124)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0125)     // call	void_handler
000C: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   18h                      ;VC3 Interrupt Vector
                                        (0129)     // call	void_handler
0018: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0133)     // call	void_handler
001C: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 04 D6 LJMP  _ADCINC_ADConversion_ISR(0137)     ljmp	_ADCINC_ADConversion_ISR
0023: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0141)     // call	void_handler
0024: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 02 91 LJMP  _UART_TX_ISR       (0145)     ljmp	_UART_TX_ISR
002B: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 02 92 LJMP  _UART_RX_ISR       (0149)     ljmp	_UART_RX_ISR
002F: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0153)     // call	void_handler
0060: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0157)     // call	void_handler
0064: 7E       RETI                     (0158)     reti
0068: 71 10    OR    F,0x10             
                                        (0159) 
                                        (0160) ;-----------------------------------------------------------------------------
                                        (0161) ;  Start of Execution.
                                        (0162) ;-----------------------------------------------------------------------------
                                        (0163) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0164) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0165) ;
                                        (0166) 
                                        (0167) IF	(TOOLCHAIN & HITECH)
                                        (0168)  	AREA PD_startup(CODE, REL, CON)
                                        (0169) ELSE
                                        (0170)     org 68h
                                        (0171) ENDIF
                                        (0172) __Start:
                                        (0173) 
                                        (0174)     ; initialize SMP values for voltage stabilization, if required,
                                        (0175)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0176)     ; least for now. 
                                        (0177)     ;
                                        (0178)     M8C_SetBank1
006A: 62 E3 80 MOV   REG[0xE3],0x80     (0179)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0180)     M8C_SetBank0
                                        (0181) 
                                        (0182) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0183) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0184)     M8C_EnableWatchDog
                                        (0185) ENDIF
                                        (0186) 
                                        (0187) IF ( SELECT_32K )
                                        (0188)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0189) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0190)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0191) ENDIF
                                        (0192) 
                                        (0193) IF	(TOOLCHAIN & HITECH)
                                        (0194) 	global		__Lstackps
                                        (0195) 	mov     a,low __Lstackps
                                        (0196) 	swap    a,sp
                                        (0197) ELSE
                                        (0198)     ;------------------
                                        (0199)     ; Set up the stack
                                        (0200)     ;------------------
0075: 50 4E    MOV   A,0x4E             (0201)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0202)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0203) ENDIF
                                        (0204) 
                                        (0205)     ;-----------------------------------------------
                                        (0206)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0207)     ;-----------------------------------------------
                                        (0208) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0209) IF ( SUPPLY_VOLTAGE )         ; 1 means 5.0V
                                        (0210)  IF ( AGND_BYPASS )
                                        (0211)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0212)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0213)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0214)     ; value using the proper trim values.
                                        (0215)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0216)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0217)  ENDIF
                                        (0218) ELSE    ; 3.3 V Operation, not 5.0V
                                        (0219)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0220) ENDIF ;(SUPPLY_VOLTAGE)
                                        (0221) 
007B: 55 F8 00 MOV   [_ramareas_end+170],0x0(0222)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [_ramareas_end+171],0x0(0223)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0224) 
                                        (0225)     ;---------------------------------------
                                        (0226)     ; Initialize Crystal Oscillator and PLL
                                        (0227)     ;---------------------------------------
                                        (0228) 
                                        (0229) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0230)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0231)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0232)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0233)     ; the ECO to stabilize.
                                        (0234)     ;
                                        (0235)     M8C_SetBank1
                                        (0236)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0237)     M8C_SetBank0
                                        (0238)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0239)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0240)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0241) .WaitFor1s:
                                        (0242)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0243)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0244)                                           ;   since interrupts are not globally enabled
                                        (0245) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0246)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0247)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0248)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0249)     M8C_SetBank0
                                        (0250)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0251) 
                                        (0252) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0253) 
                                        (0254) IF ( PLL_MODE )
                                        (0255)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0256)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0257)     ;
                                        (0258)     M8C_SetBank1
                                        (0259)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0260)     M8C_SetBank0
                                        (0261)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0262)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0263) 
                                        (0264) .WaitFor16ms:
                                        (0265)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0266)     jz   .WaitFor16ms
                                        (0267)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0268)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0269)     M8C_SetBank0
                                        (0270) 
                                        (0271) IF      ( WAIT_FOR_32K )
                                        (0272) ELSE ; !( WAIT_FOR_32K )
                                        (0273)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0274)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0275) ENDIF ;(WAIT_FOR_32K)
                                        (0276) ENDIF ;(PLL_MODE)
                                        (0277) 
                                        (0278) 	;-------------------------------------------------------
                                        (0279)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0280)     ;-------------------------------------------------------
                                        (0281) 
                                        (0282)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0283) 
                                        (0284) IF (SYSCLK_SOURCE)
                                        (0285)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0286) ENDIF
                                        (0287)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0288) 
                                        (0289)     ;------------------------
                                        (0290)     ; Close CT leakage path.
                                        (0291)     ;------------------------
008B: 62 71 05 MOV   REG[0x71],0x5      (0292)     mov   reg[ACB00CR0], 05h
008E: 62 75 05 MOV   REG[0x75],0x5      (0293)     mov   reg[ACB01CR0], 05h
                                        (0294) 
                                        (0295)     ;-------------------------
                                        (0296)     ; Load Base Configuration
                                        (0297)     ;-------------------------
                                        (0298)     ; Load global parameter settings and load the user modules in the
                                        (0299)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0300)     ; to minimize start up time; (2) We may still need to play with the
                                        (0301)     ; Sleep Timer.
                                        (0302)     ;
0091: 7C 02 87 LCALL 0x0287             (0303)     lcall LoadConfigInit
                                        (0304) 
                                        (0305)     ;-----------------------------------
                                        (0306)     ; Initialize C Run-Time Environment
                                        (0307)     ;-----------------------------------
                                        (0308) IF ( C_LANGUAGE_SUPPORT )
0094: 50 00    MOV   A,0x0              (0309)     mov  A,0                           ; clear the 'bss' segment to zero
0096: 55 03 0C MOV   [__r0],0xC         (0310)     mov  [__r0],<__bss_start
                                        (0311) BssLoop:
0099: 3C 03 4E CMP   [__r0],0x4E        (0312)     cmp  [__r0],<__bss_end
009C: A0 05    JZ    0x00A2             (0313)     jz   BssDone
009E: 3F 03    MVI   [__r0],A           (0314)     mvi  [__r0],A
00A0: 8F F8    JMP   0x0099             (0315)     jmp  BssLoop
                                        (0316) BssDone:
00A2: 50 01    MOV   A,0x1              (0317)     mov  A,>__idata_start              ; copy idata to data segment
00A4: 57 50    MOV   X,0x50             (0318)     mov  X,<__idata_start
00A6: 55 03 00 MOV   [__r0],0x0         (0319)     mov  [__r0],<__data_start
                                        (0320) IDataLoop:
00A9: 3C 03 03 CMP   [__r0],0x3         (0321)     cmp  [__r0],<__data_end
00AC: A0 0B    JZ    0x00B8             (0322)     jz   C_RTE_Done
00AE: 08       PUSH  A                  (0323)     push A
00AF: 28       ROMX                     (0324)     romx
00B0: 3F 03    MVI   [__r0],A           (0325)     mvi  [__r0],A
00B2: 18       POP   A                  (0326)     pop  A
00B3: 75       INC   X                  (0327)     inc  X
00B4: 09 00    ADC   A,0x0              (0328)     adc  A,0
00B6: 8F F2    JMP   0x00A9             (0329)     jmp  IDataLoop
00B8: 71 10    OR    F,0x10             
                                        (0330) 
                                        (0331) C_RTE_Done:
                                        (0332) 
                                        (0333) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0334) 
                                        (0335)     ;-------------------------------
                                        (0336)     ; Voltage Stabilization for SMP
                                        (0337)     ;-------------------------------
                                        (0338) 
                                        (0339) IF ( SUPPLY_VOLTAGE )                  ; 1 Means 5 Volts
                                        (0340) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0341)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0342)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0343)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0344)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0345)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0346)     M8C_SetBank1
                                        (0347)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0348)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0349)     M8C_SetBank0
                                        (0350)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0351)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0352) .WaitFor2ms:
                                        (0353)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0354)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0355) ENDIF ; ( SWITCH_MODE_PUMP ^ 1 )
                                        (0356) ENDIF ; ( SUPPLY_VOLTAGE )
                                        (0357) 
                                        (0358)     ;-------------------------------
                                        (0359)     ; Set Power-On Reset (POR) Level
                                        (0360)     ;-------------------------------
                                        (0361) 
                                        (0362)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH,
                                        (0363)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper
                                        (0364)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. These
                                        (0365)     ;  values should not be changed from the settings here. Failure to follow this instruction could 
                                        (0366)     ;  lead to corruption of PSoC flash.
                                        (0367) 
                                        (0368)     M8C_SetBank1
                                        (0369) 
                                        (0370) IF ( SUPPLY_VOLTAGE )                       ; 1 Means 5 Volts
                                        (0371)  IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )  ;    Also 24MHz?
                                        (0372)                                             ;       no, set midpoint POR in user code, if desired
                                        (0373)  ELSE ; 24HMz                               ;
00BA: 43 E3 20 OR    REG[0xE3],0x20     (0374)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
00BD: 70 EF    AND   F,0xEF             
                                        (0375)  ENDIF ; OSC_CRO_CPU_24MHz
                                        (0376) ENDIF ; 5V
                                        (0377) 
                                        (0378)     M8C_SetBank0
                                        (0379) 
                                        (0380)     ;----------------------------
                                        (0381)     ; Wrap up and invoke "main"
                                        (0382)     ;----------------------------
                                        (0383) 
                                        (0384)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0385)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0386)     ;
00BF: 62 E0 00 MOV   REG[0xE0],0x0      (0387)     mov  reg[INT_MSK0],0
00C2: 71 10    OR    F,0x10             
                                        (0388) 
                                        (0389)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0390)     ;
                                        (0391)     M8C_SetBank1
00C4: 62 E0 03 MOV   REG[0xE0],0x3      (0392)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00C7: 70 EF    AND   F,0xEF             
                                        (0393)     M8C_SetBank0
                                        (0394) 
                                        (0395)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0396)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0397)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0398)     ;
00C9: 62 E2 00 MOV   REG[0xE2],0x0      (0399)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0400) 
                                        (0401) IF	(TOOLCHAIN & HITECH)
                                        (0402) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0403) ELSE                                   ; have been set during the boot process.
                                        (0404) IF ENABLE_LJMP_TO_MAIN
                                        (0405)     ljmp  _main                    ; goto main (no return)
                                        (0406) ELSE
00CC: 7C 05 BB LCALL __UserModules_end|__text_start|_main|_main(0407)     lcall _main                    ; call main
                                        (0408) .Exit:
00CF: 8F FF    JMP   0x00CF             (0409)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0410) ENDIF
                                        (0411) ENDIF ; TOOLCHAIN
                                        (0412)     ;---------------------------------
                                        (0413)     ; Library Access to Global Parms
                                        (0414)     ;---------------------------------
                                        (0415)     ;
                                        (0416)  bGetPowerSetting:
                                        (0417) _bGetPowerSetting:
                                        (0418)     ; Synthesize the "power setting" value used by chips with SlowIMO mode.
                                        (0419)     ; Returns value of POWER_SETTING in the A register.
                                        (0420)     ; No inputs. No Side Effects.
                                        (0421)     ;
                                        (0422) IF ( SUPPLY_VOLTAGE )            ; 1 means 5.0V
00D1: 50 10    MOV   A,0x10             (0423)     mov   A, POWER_SET_5V0_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0424) ELSE        
                                        (0425)     mov   A, POWER_SET_3V3_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0426) ENDIF
00D3: 7F       RET                      (0427)     ret
                                        (0428) 
                                        (0429) IF	(TOOLCHAIN & HITECH)
                                        (0430) ELSE
                                        (0431)     ;---------------------------------
                                        (0432)     ; Order Critical RAM & ROM AREAs
                                        (0433)     ;---------------------------------
                                        (0434)     ;  'TOP' is all that has been defined so far...
                                        (0435) 
                                        (0436)     ;  ROM AREAs for C CONST, static & global items
                                        (0437)     ;
                                        (0438)     AREA lit               (ROM, REL, CON)   ; 'const' definitions
                                        (0439)     AREA idata             (ROM, REL, CON)   ; Constants for initializing RAM
                                        (0440) __idata_start:
                                        (0441) 
                                        (0442)     AREA func_lit          (ROM, REL, CON)   ; Function Pointers
                                        (0443) __func_lit_start:
                                        (0444) 
                                        (0445)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0446)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0447) 
                                        (0448)     ; CODE segment for general use
                                        (0449)     ;
                                        (0450)     AREA text (ROM, REL, CON)
                                        (0451) __text_start:
                                        (0452) 
                                        (0453)     ; RAM area usage
                                        (0454)     ;
                                        (0455)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0456) __data_start:
                                        (0457) 
                                        (0458)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0459)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0460)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0461) __bss_start:
                                        (0462) ENDIF ; TOOLCHAIN
                                        (0463) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.2.2401
0153: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) include "m8c.inc"
                                        (0004) ;  Personalization tables 
                                        (0005) export LoadConfigTBL_serialtest1
                                        (0006) AREA psoc_config(rom, rel)
                                        (0007) LoadConfigTBL_serialtest1:
                                        (0008) 	M8C_SetBank0
                                        (0009) ;  Global Register values Bank 0
0155: 62 60 00 MOV   REG[0x60],0x0      (0010) 	mov	reg[60h], 00h		; AnalogColumnInputSelect register (AMX_IN)
0158: 62 66 00 MOV   REG[0x66],0x0      (0011) 	mov	reg[66h], 00h		; AnalogComparatorControl1 register (CMP_CR1)
015B: 62 63 17 MOV   REG[0x63],0x17     (0012) 	mov	reg[63h], 17h		; AnalogReferenceControl register (ARF_CR)
015E: 62 65 00 MOV   REG[0x65],0x0      (0013) 	mov	reg[65h], 00h		; AnalogSyncControl register (ASY_CR)
0161: 62 E6 00 MOV   REG[0xE6],0x0      (0014) 	mov	reg[e6h], 00h		; DecimatorControl_0 register (DEC_CR0)
0164: 62 E7 02 MOV   REG[0xE7],0x2      (0015) 	mov	reg[e7h], 02h		; DecimatorControl_1 register (DEC_CR1)
0167: 62 D6 00 MOV   REG[0xD6],0x0      (0016) 	mov	reg[d6h], 00h		; I2CConfig register (I2CCFG)
016A: 62 B0 00 MOV   REG[0xB0],0x0      (0017) 	mov	reg[b0h], 00h		; Row_0_InputMux register (RDI0RI)
016D: 62 B1 00 MOV   REG[0xB1],0x0      (0018) 	mov	reg[b1h], 00h		; Row_0_InputSync register (RDI0SYN)
0170: 62 B2 00 MOV   REG[0xB2],0x0      (0019) 	mov	reg[b2h], 00h		; Row_0_LogicInputAMux register (RDI0IS)
0173: 62 B3 33 MOV   REG[0xB3],0x33     (0020) 	mov	reg[b3h], 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
0176: 62 B4 33 MOV   REG[0xB4],0x33     (0021) 	mov	reg[b4h], 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
0179: 62 B5 09 MOV   REG[0xB5],0x9      (0022) 	mov	reg[b5h], 09h		; Row_0_OutputDrive_0 register (RDI0SRO0)
017C: 62 B6 20 MOV   REG[0xB6],0x20     (0023) 	mov	reg[b6h], 20h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0024) ;  Instance name ADCINC, User Module ADCINC
                                        (0025) ;       Instance name ADCINC, Block Name ADC(ASC10)
017F: 62 80 90 MOV   REG[0x80],0x90     (0026) 	mov	reg[80h], 90h		;ADCINC_AtoDcr0(ASC10CR0)
0182: 62 81 00 MOV   REG[0x81],0x0      (0027) 	mov	reg[81h], 00h		;ADCINC_AtoDcr1(ASC10CR1)
0185: 62 82 60 MOV   REG[0x82],0x60     (0028) 	mov	reg[82h], 60h		;ADCINC_AtoDcr2(ASC10CR2)
0188: 62 83 F0 MOV   REG[0x83],0xF0     (0029) 	mov	reg[83h], f0h		;ADCINC_AtoDcr3(ASC10CR3)
                                        (0030) ;       Instance name ADCINC, Block Name PWM(DBB00)
018B: 62 23 00 MOV   REG[0x23],0x0      (0031) 	mov	reg[23h], 00h		;ADCINC_PWMcr0(DBB00CR0)
018E: 62 21 00 MOV   REG[0x21],0x0      (0032) 	mov	reg[21h], 00h		;ADCINC_PWMdr1(DBB00DR1)
0191: 62 22 01 MOV   REG[0x22],0x1      (0033) 	mov	reg[22h], 01h		;ADCINC_PWMdr2(DBB00DR2)
                                        (0034) ;  Instance name DAC6, User Module DAC6
                                        (0035) ;       Instance name DAC6, Block Name DAC(ASD11)
0194: 62 84 80 MOV   REG[0x84],0x80     (0036) 	mov	reg[84h], 80h		;DAC6_CR0(ASD11CR0)
0197: 62 85 80 MOV   REG[0x85],0x80     (0037) 	mov	reg[85h], 80h		;DAC6_CR1(ASD11CR1)
019A: 62 86 A0 MOV   REG[0x86],0xA0     (0038) 	mov	reg[86h], a0h		;DAC6_CR2(ASD11CR2)
019D: 62 87 30 MOV   REG[0x87],0x30     (0039) 	mov	reg[87h], 30h		;DAC6_CR3(ASD11CR3)
                                        (0040) ;  Instance name PGA_1, User Module PGA
                                        (0041) ;       Instance name PGA_1, Block Name GAIN(ACB00)
01A0: 62 71 FE MOV   REG[0x71],0xFE     (0042) 	mov	reg[71h], feh		;PGA_1_GAIN_CR0(ACB00CR0)
01A3: 62 72 21 MOV   REG[0x72],0x21     (0043) 	mov	reg[72h], 21h		;PGA_1_GAIN_CR1(ACB00CR1)
01A6: 62 73 20 MOV   REG[0x73],0x20     (0044) 	mov	reg[73h], 20h		;PGA_1_GAIN_CR2(ACB00CR2)
01A9: 62 70 00 MOV   REG[0x70],0x0      (0045) 	mov	reg[70h], 00h		;PGA_1_GAIN_CR3(ACB00CR3)
                                        (0046) ;  Instance name PWM8, User Module PWM8
                                        (0047) ;       Instance name PWM8, Block Name PWM8(DBB01)
01AC: 62 27 00 MOV   REG[0x27],0x0      (0048) 	mov	reg[27h], 00h		;PWM8_CONTROL_REG(DBB01CR0)
01AF: 62 25 FF MOV   REG[0x25],0xFF     (0049) 	mov	reg[25h], ffh		;PWM8_PERIOD_REG(DBB01DR1)
01B2: 62 26 00 MOV   REG[0x26],0x0      (0050) 	mov	reg[26h], 00h		;PWM8_COMPARE_REG(DBB01DR2)
                                        (0051) ;  Instance name UART, User Module UART
                                        (0052) ;       Instance name UART, Block Name RX(DCB03)
01B5: 62 2F 00 MOV   REG[0x2F],0x0      (0053) 	mov	reg[2fh], 00h		;UART_RX_CONTROL_REG(DCB03CR0)
01B8: 62 2D 00 MOV   REG[0x2D],0x0      (0054) 	mov	reg[2dh], 00h		;UART_(DCB03DR1)
01BB: 62 2E 00 MOV   REG[0x2E],0x0      (0055) 	mov	reg[2eh], 00h		;UART_RX_BUFFER_REG (DCB03DR2)
                                        (0056) ;       Instance name UART, Block Name TX(DCB02)
01BE: 62 2B 00 MOV   REG[0x2B],0x0      (0057) 	mov	reg[2bh], 00h		;UART_TX_CONTROL_REG(DCB02CR0)
01C1: 62 29 00 MOV   REG[0x29],0x0      (0058) 	mov	reg[29h], 00h		;UART_TX_BUFFER_REG (DCB02DR1)
01C4: 62 2A 00 MOV   REG[0x2A],0x0      (0059) 	mov	reg[2ah], 00h		;UART_(DCB02DR2)
01C7: 71 10    OR    F,0x10             
                                        (0060) 	M8C_SetBank1
                                        (0061) ;  Global Register values Bank 1
01C9: 62 61 00 MOV   REG[0x61],0x0      (0062) 	mov	reg[61h], 00h		; AnalogClockSelect1 register (CLK_CR1)
01CC: 62 69 00 MOV   REG[0x69],0x0      (0063) 	mov	reg[69h], 00h		; AnalogClockSelect2 register (CLK_CR2)
01CF: 62 60 04 MOV   REG[0x60],0x4      (0064) 	mov	reg[60h], 04h		; AnalogColumnClockSelect register (CLK_CR0)
01D2: 62 62 20 MOV   REG[0x62],0x20     (0065) 	mov	reg[62h], 20h		; AnalogIOControl_0 register (ABF_CR0)
01D5: 62 67 33 MOV   REG[0x67],0x33     (0066) 	mov	reg[67h], 33h		; AnalogLUTControl0 register (ALT_CR0)
01D8: 62 68 00 MOV   REG[0x68],0x0      (0067) 	mov	reg[68h], 00h		; AnalogLUTControl1 register (ALT_CR1)
01DB: 62 63 00 MOV   REG[0x63],0x0      (0068) 	mov	reg[63h], 00h		; AnalogModulatorControl_0 register (AMD_CR0)
01DE: 62 66 00 MOV   REG[0x66],0x0      (0069) 	mov	reg[66h], 00h		; AnalogModulatorControl_1 register (AMD_CR1)
01E1: 62 D1 00 MOV   REG[0xD1],0x0      (0070) 	mov	reg[d1h], 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
01E4: 62 D3 00 MOV   REG[0xD3],0x0      (0071) 	mov	reg[d3h], 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
01E7: 62 D0 00 MOV   REG[0xD0],0x0      (0072) 	mov	reg[d0h], 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
01EA: 62 D2 00 MOV   REG[0xD2],0x0      (0073) 	mov	reg[d2h], 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
01ED: 62 E1 2F MOV   REG[0xE1],0x2F     (0074) 	mov	reg[e1h], 2fh		; OscillatorControl_1 register (OSC_CR1)
01F0: 62 E2 00 MOV   REG[0xE2],0x0      (0075) 	mov	reg[e2h], 00h		; OscillatorControl_2 register (OSC_CR2)
01F3: 62 DF BB MOV   REG[0xDF],0xBB     (0076) 	mov	reg[dfh], bbh		; OscillatorControl_3 register (OSC_CR3)
01F6: 62 DE 01 MOV   REG[0xDE],0x1      (0077) 	mov	reg[deh], 01h		; OscillatorControl_4 register (OSC_CR4)
01F9: 62 DD 00 MOV   REG[0xDD],0x0      (0078) 	mov	reg[ddh], 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0079) ;  Instance name ADCINC, User Module ADCINC
                                        (0080) ;       Instance name ADCINC, Block Name ADC(ASC10)
                                        (0081) ;       Instance name ADCINC, Block Name PWM(DBB00)
01FC: 62 20 31 MOV   REG[0x20],0x31     (0082) 	mov	reg[20h], 31h		;ADCINC_PWMfn(DBB00FN)
01FF: 62 21 15 MOV   REG[0x21],0x15     (0083) 	mov	reg[21h], 15h		;ADCINC_PWMsl(DBB00IN)
0202: 62 22 40 MOV   REG[0x22],0x40     (0084) 	mov	reg[22h], 40h		;ADCINC_PWMos(DBB00OU)
                                        (0085) ;  Instance name DAC6, User Module DAC6
                                        (0086) ;       Instance name DAC6, Block Name DAC(ASD11)
                                        (0087) ;  Instance name PGA_1, User Module PGA
                                        (0088) ;       Instance name PGA_1, Block Name GAIN(ACB00)
                                        (0089) ;  Instance name PWM8, User Module PWM8
                                        (0090) ;       Instance name PWM8, Block Name PWM8(DBB01)
0205: 62 24 21 MOV   REG[0x24],0x21     (0091) 	mov	reg[24h], 21h		;PWM8_FUNC_REG(DBB01FN)
0208: 62 25 14 MOV   REG[0x25],0x14     (0092) 	mov	reg[25h], 14h		;PWM8_INPUT_REG(DBB01IN)
020B: 62 26 07 MOV   REG[0x26],0x7      (0093) 	mov	reg[26h], 07h		;PWM8_OUTPUT_REG(DBB01OU)
                                        (0094) ;  Instance name UART, User Module UART
                                        (0095) ;       Instance name UART, Block Name RX(DCB03)
020E: 62 2C 05 MOV   REG[0x2C],0x5      (0096) 	mov	reg[2ch], 05h		;UART_RX_FUNC_REG   (DCB03FN)
0211: 62 2D E5 MOV   REG[0x2D],0xE5     (0097) 	mov	reg[2dh], e5h		;UART_RX_INPUT_REG  (DCB03IN)
0214: 62 2E 40 MOV   REG[0x2E],0x40     (0098) 	mov	reg[2eh], 40h		;UART_RX_OUTPUT_REG (DCB03OU)
                                        (0099) ;       Instance name UART, Block Name TX(DCB02)
0217: 62 28 0D MOV   REG[0x28],0xD      (0100) 	mov	reg[28h], 0dh		;UART_TX_FUNC_REG   (DCB02FN)
021A: 62 29 05 MOV   REG[0x29],0x5      (0101) 	mov	reg[29h], 05h		;UART_TX_INPUT_REG  (DCB02IN)
021D: 62 2A 44 MOV   REG[0x2A],0x44     (0102) 	mov	reg[2ah], 44h		;UART_TX_OUTPUT_REG (DCB02OU)
0220: 70 EF    AND   F,0xEF             
0222: 70 EF    AND   F,0xEF             
                                        (0103) 	M8C_SetBank0
                                        (0104) ;  Ordered Global Register values
                                        (0105) 	M8C_SetBank0
0224: 62 00 00 MOV   REG[0x0],0x0       (0106) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
0227: 71 10    OR    F,0x10             
                                        (0107) 	M8C_SetBank1
0229: 62 00 01 MOV   REG[0x0],0x1       (0108) 	mov	reg[00h], 01h		; Port_0_DriveMode_0 register (PRT0DM0)
022C: 62 01 FE MOV   REG[0x1],0xFE      (0109) 	mov	reg[01h], feh		; Port_0_DriveMode_1 register (PRT0DM1)
022F: 70 EF    AND   F,0xEF             
                                        (0110) 	M8C_SetBank0
0231: 62 03 FA MOV   REG[0x3],0xFA      (0111) 	mov	reg[03h], fah		; Port_0_DriveMode_2 register (PRT0DM2)
0234: 62 02 05 MOV   REG[0x2],0x5       (0112) 	mov	reg[02h], 05h		; Port_0_GlobalSelect register (PRT0GS)
0237: 71 10    OR    F,0x10             
                                        (0113) 	M8C_SetBank1
0239: 62 02 00 MOV   REG[0x2],0x0       (0114) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
023C: 62 03 00 MOV   REG[0x3],0x0       (0115) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
023F: 70 EF    AND   F,0xEF             
                                        (0116) 	M8C_SetBank0
0241: 62 01 00 MOV   REG[0x1],0x0       (0117) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0244: 62 04 00 MOV   REG[0x4],0x0       (0118) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0247: 71 10    OR    F,0x10             
                                        (0119) 	M8C_SetBank1
0249: 62 04 10 MOV   REG[0x4],0x10      (0120) 	mov	reg[04h], 10h		; Port_1_DriveMode_0 register (PRT1DM0)
024C: 62 05 EF MOV   REG[0x5],0xEF      (0121) 	mov	reg[05h], efh		; Port_1_DriveMode_1 register (PRT1DM1)
024F: 70 EF    AND   F,0xEF             
                                        (0122) 	M8C_SetBank0
0251: 62 07 EF MOV   REG[0x7],0xEF      (0123) 	mov	reg[07h], efh		; Port_1_DriveMode_2 register (PRT1DM2)
0254: 62 06 10 MOV   REG[0x6],0x10      (0124) 	mov	reg[06h], 10h		; Port_1_GlobalSelect register (PRT1GS)
0257: 71 10    OR    F,0x10             
                                        (0125) 	M8C_SetBank1
0259: 62 06 00 MOV   REG[0x6],0x0       (0126) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
025C: 62 07 00 MOV   REG[0x7],0x0       (0127) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
025F: 70 EF    AND   F,0xEF             
                                        (0128) 	M8C_SetBank0
0261: 62 05 00 MOV   REG[0x5],0x0       (0129) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0264: 62 08 00 MOV   REG[0x8],0x0       (0130) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0267: 71 10    OR    F,0x10             
                                        (0131) 	M8C_SetBank1
0269: 62 08 80 MOV   REG[0x8],0x80      (0132) 	mov	reg[08h], 80h		; Port_2_DriveMode_0 register (PRT2DM0)
026C: 62 09 7F MOV   REG[0x9],0x7F      (0133) 	mov	reg[09h], 7fh		; Port_2_DriveMode_1 register (PRT2DM1)
026F: 70 EF    AND   F,0xEF             
                                        (0134) 	M8C_SetBank0
0271: 62 0B 7F MOV   REG[0xB],0x7F      (0135) 	mov	reg[0bh], 7fh		; Port_2_DriveMode_2 register (PRT2DM2)
0274: 62 0A 80 MOV   REG[0xA],0x80      (0136) 	mov	reg[0ah], 80h		; Port_2_GlobalSelect register (PRT2GS)
0277: 71 10    OR    F,0x10             
                                        (0137) 	M8C_SetBank1
0279: 62 0A 00 MOV   REG[0xA],0x0       (0138) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
027C: 62 0B 00 MOV   REG[0xB],0x0       (0139) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
027F: 70 EF    AND   F,0xEF             
                                        (0140) 	M8C_SetBank0
0281: 62 09 00 MOV   REG[0x9],0x0       (0141) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0284: 70 EF    AND   F,0xEF             
                                        (0142) 	M8C_SetBank0
0286: 7F       RET                      (0143) 	ret
                                        (0144) 
                                        (0145) 
                                        (0146) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.2.2401
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_serialtest1
                                        (0026) export _LoadConfig_serialtest1
                                        (0027) 
                                        (0028) export NO_SHADOW
                                        (0029) export _NO_SHADOW
                                        (0030) 
                                        (0031) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0032) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0033) 
                                        (0034) AREA psoc_config(rom, rel)
                                        (0035) 
                                        (0036) 
                                        (0037) ;---------------------------------------------------------------------------
                                        (0038) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0039) ;                  parameters handled by boot code, like CPU speed). This
                                        (0040) ;                  function can be called from user code, but typically it
                                        (0041) ;                  is only called from boot.
                                        (0042) ;
                                        (0043) ;       INPUTS: None.
                                        (0044) ;      RETURNS: Nothing.
                                        (0045) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0046) ;               In the large memory model currently only the page
                                        (0047) ;               pointer registers listed below are modified.  This does
                                        (0048) ;               not guarantee that in future implementations of this
                                        (0049) ;               function other page pointer registers will not be
                                        (0050) ;               modified.
                                        (0051) ;          
                                        (0052) ;               Page Pointer Registers Modified: 
                                        (0053) ;               CUR_PP
                                        (0054) ;
                                        (0055) _LoadConfigInit:
                                        (0056)  LoadConfigInit:
                                        (0057)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0058)     
0287: 7C 02 8B LCALL 0x028B             (0059) 	lcall	LoadConfig_serialtest1
                                        (0060) 
                                        (0061) 
                                        (0062)     RAM_EPILOGUE RAM_USE_CLASS_4
028A: 7F       RET                      (0063)     ret
                                        (0064) 
                                        (0065) ;---------------------------------------------------------------------------
                                        (0066) ; Load Configuration serialtest1
                                        (0067) ;
                                        (0068) ;    Load configuration registers for serialtest1.
                                        (0069) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0070) ;
                                        (0071) ;       INPUTS: None.
                                        (0072) ;      RETURNS: Nothing.
                                        (0073) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0074) ;               modified as may the Page Pointer registers!
                                        (0075) ;               In the large memory model currently only the page
                                        (0076) ;               pointer registers listed below are modified.  This does
                                        (0077) ;               not guarantee that in future implementations of this
                                        (0078) ;               function other page pointer registers will not be
                                        (0079) ;               modified.
                                        (0080) ;          
                                        (0081) ;               Page Pointer Registers Modified: 
                                        (0082) ;               CUR_PP
                                        (0083) ;
                                        (0084) _LoadConfig_serialtest1:
                                        (0085)  LoadConfig_serialtest1:
                                        (0086)     RAM_PROLOGUE RAM_USE_CLASS_4
028B: 7C 01 53 LCALL 0x0153             (0087)     lcall   LoadConfigTBL_serialtest1            ; Call load config table routine
028E: 70 EF    AND   F,0xEF             
                                        (0088) 
                                        (0089) 
                                        (0090)     M8C_SetBank0                    ; Force return to bank 0
                                        (0091)     RAM_EPILOGUE RAM_USE_CLASS_4
0290: 7F       RET                      (0092)     ret
                                        (0093) 
                                        (0094) 
                                        (0095) 
                                        (0096) AREA InterruptRAM(ram, rel)
                                        (0097) 
                                        (0098) NO_SHADOW:
                                        (0099) _NO_SHADOW:
FILE: lib\uartint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UARTINT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2011/12/1 at 17:23:30
                                        (0005) ;;  Generated by PSoC Designer 5.2.2401
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_TX_ISR
                                        (0022) export  _UART_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_RXBUF_ENABLE)
                                        (0025) export  UART_aRxBuffer
                                        (0026) export _UART_aRxBuffer
                                        (0027) export  UART_bRxCnt
                                        (0028) export _UART_bRxCnt
                                        (0029) export  UART_fStatus
                                        (0030) export _UART_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_RXBUF_ENABLE)
                                        (0040)  UART_fStatus:
                                        (0041) _UART_fStatus:      BLK  1
                                        (0042)  UART_bRxCnt:
                                        (0043) _UART_bRxCnt:       BLK  1
                                        (0044) AREA UART_RAM (RAM, REL, CON)
                                        (0045)  UART_aRxBuffer:
                                        (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _My_C_Function
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
0291: 7E       RETI                     (0115)    reti
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;   NOTE: interrupt service routines must preserve
                                        (0158)    ;   the values of the A and X CPU registers.
                                        (0159)    
                                        (0160)    ; JWHONG: I dropped this into assembly because it's a very critical loop
                                        (0161)    ; and needs to be tight.
                                        (0162)    ;
                                        (0163)    ; NOTE:  For some reason, pushing A and X to the stack and popping them after causes an intermittent bug...
                                        (0164)    ; Don't ask me why.  I was just following the auto-generated recommendations above.
                                        (0165)    ;push A
                                        (0166)    ;push X
0292: 5D 2E    MOV   A,REG[0x2E]        (0167)    mov  A,REG[UART_RX_BUFFER_REG]    ; Read the received data
0294: 3C 00 00 CMP   [bytes_received],0x0(0168)    cmp  [_bytes_received], 0x00		 ; Were we waiting for the start of a packet?
0297: A0 22    JZ    0x02BA             (0169)    jz   packet_start
                                        (0170) not_packet_start:
0299: 3C 4D 00 CMP   [target_address],0x0(0171)    cmp  [_target_address], 0x00      ; Load the target address
029C: B0 3E    JNZ   0x02DB             (0172)    jnz  forward_data				 ; If we are not the targeted device, forward the data
029E: 3C 02 80 CMP   [m_to_s_offset],0x80(0173)    cmp  [_m_to_s_offset], 0x80       ; Is the m_to_s flag set?
02A1: C0 0B    JC    0x02AD             (0174)    jc   m_to_s_flag_not_set          ; Jump if the last packet we received was NOT a write address
02A3: 26 02 1F AND   [m_to_s_offset],0x1F(0175)    and  [_m_to_s_offset], 0x1F       ; Mask the index and clear the flag. Since our buffer is only 32 wide, cap max value
02A6: 58 02    MOV   X,[m_to_s_offset]  (0176)    mov  X, [_m_to_s_offset]          ; Load the offset
02A8: 54 2C    MOV   [X+44],A           (0177)    mov  [X+_m_to_s_mem], A           ; Master is writing to the slave
02AA: 75       INC   X                  (0178)    inc  X                            ; Send the requested address+1 back to the master
02AB: 80 0A    JMP   0x02B6             (0179)    jmp load_s_to_m_X
                                        (0180) m_to_s_flag_not_set:
02AD: 39 80    CMP   A,0x80             (0181)    cmp  A, 0x80                      ; Is this an address for a m_to_s write?
02AF: C0 05    JC    0x02B5             (0182)    jc   received_s_to_m_address
02B1: 53 02    MOV   [m_to_s_offset],A  (0183)    mov  [_m_to_s_offset], A          ; Store the index the master wants to write to.  We will write the next received byte there.
02B3: 21 7F    AND   A,0x7F             (0184)    and  A, 0x7F                      ; Mask the address so we can give the master back some data
                                        (0185) received_s_to_m_address:
02B5: 5C       MOV   X,A                (0186)    mov  X, A						 ; A is the index requested by the master
                                        (0187) load_s_to_m_X:
02B6: 52 0C    MOV   A,[X+12]           (0188)    mov  A, [X+_s_to_m_mem]			 ; Load the requested address
02B8: 80 22    JMP   0x02DB             (0189)    jmp  forward_data                 ; Fire it off
                                        (0190) packet_start:
02BA: 53 4C    MOV   [expected_bytes],A (0191)    mov  [_expected_bytes], A         ; Borrowing expected_bytes for storage
02BC: 21 0F    AND   A,0xF              (0192)    and  A, 0x0F
02BE: B0 04    JNZ   0x02C3             (0193)    jnz  skip_lock_acquire            ; If we are the selected node, lock our external memory until we're done with this transaction
02C0: 55 01 01 MOV   [ext_mem_locked],0x1(0194)    mov  [_ext_mem_locked], 0x01      ; Lock the memory while we're reading from it
                                        (0195) skip_lock_acquire:
02C3: 53 4D    MOV   [target_address],A (0196)    mov  [_target_address], A         ; Save the target address
02C5: 78       DEC   A                  (0197)    dec  A                            ; Decrement the address we will forward
02C6: 21 0F    AND   A,0xF              (0198)    and  A, 0x0F
02C8: 26 4C F0 AND   [expected_bytes],0xF0(0199)    and  [_expected_bytes], 0xF0      ; Mask the top 4 bits
02CB: 2A 4C    OR    A,[expected_bytes] (0200)    or   A, [_expected_bytes]
02CD: 60 29    MOV   REG[0x29],A        (0201)    mov  REG[UART_TX_BUFFER_REG], A   ; Forward the data
02CF: 51 4C    MOV   A,[expected_bytes] (0202)    mov  A, [_expected_bytes]         ; Reload expected bytes
02D1: 67       ASR   A                  (0203)    asr  A                            ; shift right 4 bits
02D2: 67       ASR   A                  (0204)    asr  A
02D3: 67       ASR   A                  (0205)    asr  A
02D4: 67       ASR   A                  (0206)    asr  A
02D5: 21 0F    AND   A,0xF              (0207)    and  A, 0x0F						 ; Mask out top 4 bits
02D7: 53 4C    MOV   [expected_bytes],A (0208)    mov  [_expected_bytes], A		 ; Save expected bytes
02D9: 80 03    JMP   0x02DD             (0209)    jmp check_if_packet_done
                                        (0210) forward_data:
02DB: 60 29    MOV   REG[0x29],A        (0211)    mov REG[UART_TX_BUFFER_REG], A
                                        (0212) check_if_packet_done:
02DD: 51 00    MOV   A,[bytes_received] (0213)    mov  A, [_bytes_received]
02DF: 3A 4C    CMP   A,[expected_bytes] (0214)    cmp  A, [_expected_bytes]
02E1: B0 09    JNZ   0x02EB             (0215)    jnz packet_continues
                                        (0216) packet_end:
02E3: 55 00 00 MOV   [bytes_received],0x0(0217)    mov  [_bytes_received], 0x00      ; Re-zero the received bytes
02E6: 55 01 00 MOV   [ext_mem_locked],0x0(0218)    mov  [_ext_mem_locked], 0x00      ; Release the lock
02E9: 80 03    JMP   0x02ED             (0219)    jmp finish
                                        (0220) packet_continues:
02EB: 76 00    INC   [bytes_received]   (0221)    inc [_bytes_received]
                                        (0222) finish:
                                        (0223)    ;pop X
                                        (0224)    ;pop A
02ED: 7E       RETI                     (0225)    reti
                                        (0226)    
                                        (0227)    ;---------------------------------------------------
                                        (0228)    ; Insert your custom assembly code above this banner
                                        (0229)    ;---------------------------------------------------
                                        (0230)    
                                        (0231)    ;---------------------------------------------------
                                        (0232)    ; Insert a lcall to a C function below this banner
                                        (0233)    ; and un-comment the lines between these banners
                                        (0234)    ;---------------------------------------------------
                                        (0235)    
                                        (0236)    ;PRESERVE_CPU_CONTEXT
                                        (0237)    ;lcall _My_C_Function
                                        (0238)    ;lcall _rx_int_handler
                                        (0239)    ;RESTORE_CPU_CONTEXT
                                        (0240)    
                                        (0241)    ;---------------------------------------------------
                                        (0242)    ; Insert a lcall to a C function above this banner
                                        (0243)    ; and un-comment the lines between these banners
                                        (0244)    ;---------------------------------------------------
                                        (0245)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0246) 
                                        (0247) IF (UART_RXBUF_ENABLE)
                                        (0248)    push A
                                        (0249)    push X
                                        (0250)    
                                        (0251)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0252)       REG_PRESERVE IDX_PP
                                        (0253)    ENDIF
                                        (0254)    
                                        (0255)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
                                        (0256)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
                                        (0257)    push A                                                  ; Store copy for later test
                                        (0258)                                                            ; IF real RX interrupt
                                        (0259)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
                                        (0260)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
                                        (0261)    pop  A                                                  ; Restore stack
                                        (0262)    jmp  .RESTORE_IDX_PP
                                        (0263) 
                                        (0264) .UARTRX_ReadRx:
                                        (0265)    pop  A                                                  ; Restore status flags
                                        (0266)                                                            ; IF there is no error, get data
                                        (0267)                                                            ; Check for parity or framing error
                                        (0268)    and  A,UART_RX_ERROR
                                        (0269)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0270) 
                                        (0271)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
                                        (0272)    tst  REG[UART_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
                                        (0273)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
                                        (0274)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0275) 
                                        (0276)                                                            ; Disable and re-enable RX to reset after
                                        (0277)                                                            ; framing error.
                                        (0278)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
                                        (0279)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
                                        (0280)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0281) 
                                        (0282) 
                                        (0283) .UARTRX_NO_ERROR:
                                        (0284)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                        (0285) 
                                        (0286)                                                            ; IF buffer not full
                                        (0287)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
                                        (0288)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0289) 
                                        (0290)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
                                        (0291)    jnz  .UARTRX_CHK_BACKSPACE
                                        (0292)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
                                        (0293) 
                                        (0294) 
                                        (0295) 
                                        (0296)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (0297)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0298)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
                                        (0299)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0300)    jmp  .RESTORE_IDX_PP
                                        (0301) 
                                        (0302) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0303) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                        (0304)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                        (0305)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0306)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                        (0307)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0308)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                        (0309)    jmp  .RESTORE_IDX_PP
                                        (0310) ENDIF                                                      ; 
                                        (0311) 
                                        (0312) .UARTRX_IGNORE:
                                        (0313) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
                                        (0314)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
                                        (0315)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                        (0316) ENDIF
                                        (0317) 
                                        (0318) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0319) 	
                                        (0320)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
                                        (0321)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
                                        (0322)    jc   .UARTRX_ISR_GETDATA
                                        (0323)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0324)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
                                        (0325)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0326)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
                                        (0327)    jmp  .RESTORE_IDX_PP
                                        (0328) 
                                        (0329) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0330)                                                            ; X is already loaded with pointer
                                        (0331)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0332)    mov  [X+UART_aRxBuffer],A                               ; store data in array
                                        (0333)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0334)    inc  X                                                  ; Inc the pointer
                                        (0335)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
                                        (0336)                                                            ; ENDIF max string size
                                        (0337) .RESTORE_IDX_PP:
                                        (0338)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0339)       REG_RESTORE IDX_PP
                                        (0340)    ENDIF
                                        (0341) 
                                        (0342) .END_UARTRX_ISR:
                                        (0343)    pop  X
                                        (0344)    pop  A
                                        (0345) 
                                        (0346) ENDIF
                                        (0347) 
                                        (0348) UART_RX_ISR_END:
02EE: 7E       RETI                     (0349)    reti
                                        (0350) 
                                        (0351) ; end of file UARTINT.asm
                                        (0352) 
FILE: lib\uart.asm                      (0001) ;;*****************************************************************************
02EF: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
02F2: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0003) ;;  Filename:   UART.asm
                                        (0004) ;;  Version: 5.3, Updated on 2011/12/1 at 17:23:30
                                        (0005) ;;  Generated by PSoC Designer 5.2.2401
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_SetTxIntMode
                                        (0041) export _UART_SetTxIntMode
                                        (0042) export  UART_EnableInt
                                        (0043) export _UART_EnableInt
                                        (0044) export  UART_DisableInt
                                        (0045) export _UART_DisableInt
                                        (0046) 
                                        (0047) export  UART_Start
                                        (0048) export _UART_Start
                                        (0049) export  UART_Stop
                                        (0050) export _UART_Stop
                                        (0051) export  UART_SendData
                                        (0052) export _UART_SendData
                                        (0053) export  UART_bReadTxStatus
                                        (0054) export _UART_bReadTxStatus
                                        (0055) export  UART_bReadRxData
                                        (0056) export _UART_bReadRxData
                                        (0057) export  UART_bReadRxStatus
                                        (0058) export _UART_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_IntCntl
                                        (0061) export _UART_IntCntl
                                        (0062) 
                                        (0063) export  UART_TxIntMode
                                        (0064) export _UART_TxIntMode
                                        (0065) 
                                        (0066) export  UART_PutSHexByte
                                        (0067) export _UART_PutSHexByte
                                        (0068) export  UART_PutSHexInt
                                        (0069) export _UART_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_CPutString
                                        (0072) export _UART_CPutString
                                        (0073) export  UART_PutString
                                        (0074) export _UART_PutString
                                        (0075) export  UART_PutChar
                                        (0076) export _UART_PutChar
                                        (0077) export  UART_Write
                                        (0078) export _UART_Write
                                        (0079) export  UART_CWrite
                                        (0080) export _UART_CWrite
                                        (0081) 
                                        (0082) export  UART_cGetChar
                                        (0083) export _UART_cGetChar
                                        (0084) export  UART_cReadChar
                                        (0085) export _UART_cReadChar
                                        (0086) export  UART_iReadChar
                                        (0087) export _UART_iReadChar
                                        (0088) export  UART_PutCRLF
                                        (0089) export _UART_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_RXBUF_ENABLE)
                                        (0092) export  UART_CmdReset
                                        (0093) export _UART_CmdReset
                                        (0094) export  UART_bCmdCheck
                                        (0095) export _UART_bCmdCheck
                                        (0096) export  UART_bCmdLength
                                        (0097) export _UART_bCmdLength
                                        (0098) export  UART_bErrCheck
                                        (0099) export _UART_bErrCheck
                                        (0100) 
                                        (0101) export  UART_szGetParam
                                        (0102) export _UART_szGetParam
                                        (0103) export  UART_szGetRestOfParams
                                        (0104) export _UART_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_ReadTxStatus
                                        (0114) export _bUART_ReadTxStatus
                                        (0115) export  bUART_ReadRxData
                                        (0116) export _bUART_ReadRxData
                                        (0117) export  bUART_ReadRxStatus
                                        (0118) export _bUART_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_EnableInt:
                                        (0177) _UART_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
02F5: 7F       RET                      (0182)    ret
02F6: 41 E1 FB AND   REG[0xE1],0xFB     
02F9: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_DisableInt:
                                        (0209) _UART_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
02FC: 7F       RET                      (0214)    ret
02FD: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_SetTxIntMode:
                                        (0245) _UART_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
02FF: 21 01    AND   A,0x1              (0248)    and   A, UART_INT_MODE_TX_COMPLETE
0301: A0 07    JZ    0x0309             (0249)    jz    .SetModeRegEmpty
0303: 43 28 10 OR    REG[0x28],0x10     (0250)    or    REG[UART_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
0306: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
0308: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
0309: 41 28 EF AND   REG[0x28],0xEF     (0256)    and   REG[UART_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
030C: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
030E: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_Start:
                                        (0286) _UART_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
030F: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
0311: 60 2B    MOV   REG[0x2B],A        (0291)    mov   REG[UART_TX_CONTROL_REG], A
0313: 60 2F    MOV   REG[0x2F],A        (0292)    mov   REG[UART_RX_CONTROL_REG], A
                                        (0293) IF ( UART_RXBUF_ENABLE )
                                        (0294)    call  _UART_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
0315: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_Stop:
                                        (0323) _UART_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
0316: 41 2B FE AND   REG[0x2B],0xFE     (0325)    and   REG[UART_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
0319: 41 2F FE AND   REG[0x2F],0xFE     (0326)    and   REG[UART_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
031C: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_SendData:
                                        (0354) _UART_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
031D: 60 29    MOV   REG[0x29],A        (0356)    mov REG[UART_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
031F: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_bReadTxStatus:
                                        (0385) _UART_bReadTxStatus:
                                        (0386)  bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0387) _bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
0320: 5D 2B    MOV   A,REG[0x2B]        (0389)    mov A,  REG[UART_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
0322: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_bReadRxData:
                                        (0418) _UART_bReadRxData:
                                        (0419)  bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0420) _bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
0323: 5D 2E    MOV   A,REG[0x2E]        (0422)    mov A, REG[UART_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
0325: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_bReadRxStatus:
                                        (0452) _UART_bReadRxStatus:
                                        (0453)  bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0454) _bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
0326: 5D 2F    MOV   A,REG[0x2F]        (0456)    mov A,  REG[UART_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
0328: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_TxIntMode:
                                        (0486) _UART_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
0329: 21 01    AND   A,0x1              (0489)    and  A,UART_INT_MODE_TX_COMPLETE
032B: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
032D: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_INT_MODE_TX_COMPLETE
032F: A0 06    JZ    0x0336             (0492)    jz   .SetTxCmpMode
                                        (0493) 
0331: 41 28 EF AND   REG[0x28],0xEF     (0494)    and  reg[UART_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
0334: 80 04    JMP   0x0339             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
0336: 43 28 10 OR    REG[0x28],0x10     (0498)    or   reg[UART_TX_FUNC_REG],0x10
0339: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
033B: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_IntCntl:
                                        (0533) _UART_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
033C: 08       PUSH  A                  (0536)    push A
033D: 21 01    AND   A,0x1              (0537)    and  A,UART_ENABLE_RX_INT
033F: A0 06    JZ    0x0346             (0538)    jz   .DisRxInt
0341: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
0344: 80 04    JMP   0x0349             (0541)    jmp  .CheckTxInt
0346: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
0349: 18       POP   A                  (0547)    pop  A
034A: 21 02    AND   A,0x2              (0548)    and  A,UART_ENABLE_TX_INT
034C: A0 06    JZ    0x0353             (0549)    jz   .DisTxInt
034E: 43 E1 04 OR    REG[0xE1],0x4      
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
0351: 80 04    JMP   0x0356             (0552)    jmp  .End_IntCntl
0353: 41 E1 FB AND   REG[0xE1],0xFB     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
0356: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_PutSHexByte:
                                        (0599) _UART_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
0367: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
0368: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
0369: 67       ASR   A                  (0603)    asr   A
036A: 67       ASR   A                  (0604)    asr   A
036B: 67       ASR   A                  (0605)    asr   A
036C: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
036E: FF E7    INDEX 0x0357             (0607)    index UART_HEX_STR                  ; Get Hex value
0370: 90 0F    CALL  _UART_PutChar      (0608)    call  UART_PutChar                  ; Write data to screen
0372: 18       POP   A                  (0609)    pop   A                             ; Restore value
0373: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
0375: FF E0    INDEX 0x0357             (0611)    index UART_HEX_STR                  ; Get Hex value
0377: 90 08    CALL  _UART_PutChar      (0612)    call  UART_PutChar                  ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
0379: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_PutSHexInt:
                                        (0643) _UART_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
037A: 4B       SWAP  A,X                (0645)    swap  A,X
037B: 9F EA    CALL  _UART_PutSHexByte  (0646)    call  UART_PutSHexByte              ; Print MSB
037D: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
037E: 9F E7    CALL  _UART_PutSHexByte  (0648)    call  UART_PutSHexByte              ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
0380: 7F       RET                      (0650)    ret
0381: 49 2B 10 TST   REG[0x2B],0x10     
0384: AF FC    JZ    _UART_PutChar      
0386: 60 29    MOV   REG[0x29],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_TX_CONTROL_REG], UART_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_TX_BUFFER_REG], @Source          ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_PutChar:
                                        (0684) _UART_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
0388: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_cGetChar:
                                        (0718) _UART_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
0389: 49 2F 08 TST   REG[0x2F],0x8      (0720)    tst REG[UART_RX_CONTROL_REG],UART_RX_REG_FULL    ; Check if a character is ready
038C: AF FC    JZ    _UART_cGetChar     (0721)    jz  UART_cGetChar                             ; If not loop
038E: 5D 2E    MOV   A,REG[0x2E]        (0722)    mov A, REG[UART_RX_BUFFER_REG]                ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
0390: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_cReadChar:
                                        (0753) _UART_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
0391: 5D 2F    MOV   A,REG[0x2F]        (0755)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
0393: 08       PUSH  A                  (0756)    push A
0394: 21 08    AND   A,0x8              (0757)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
0396: B0 04    JNZ   0x039B             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
0398: 18       POP   A                  (0759)    pop  A
0399: 80 0B    JMP   0x03A5             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
039B: 5D 2E    MOV   A,REG[0x2E]        (0763)    mov  A,REG[UART_RX_BUFFER_REG ]          
039D: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
039E: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
039F: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_RX_PARITY_ERROR | UART_RX_FRAMING_ERROR)
03A1: B0 03    JNZ   0x03A5             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
03A3: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
03A4: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
03A5: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
03A7: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_iReadChar:
                                        (0814) _UART_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
03A8: 5D 2F    MOV   A,REG[0x2F]        (0816)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
03AA: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_RX_ERROR|UART_RX_REG_FULL)
03AC: 08       PUSH  A                  (0819)    push A
03AD: 21 08    AND   A,0x8              (0820)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
03AF: B0 07    JNZ   0x03B7             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
03B1: 18       POP   A                  (0822)    pop  A
03B2: 29 01    OR    A,0x1              (0823)    or   A,UART_RX_NO_DATA                                  ; Add no data flag
03B4: 4B       SWAP  A,X                (0824)    swap A,X
03B5: 80 07    JMP   0x03BD             (0825)    jmp  End_UART_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
03B7: 18       POP   A                  (0828)    pop  A
03B8: 21 E0    AND   A,0xE0             (0829)    and  A,UART_RX_ERROR
03BA: 4B       SWAP  A,X                (0830)    swap A,X
03BB: 5D 2E    MOV   A,REG[0x2E]        (0831)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
03BD: 7F       RET                      (0836)    ret
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_PutString:
                                        (0867) _UART_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
03BE: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
03C0: A0 06    JZ    0x03C7             (0872)    jz    End_PutString                           ; Check for end of string
03C2: 9F BD    CALL  _UART_PutChar      (0873)    call  UART_PutChar                            ; Send character to Tx port
03C4: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
03C5: 8F F8    JMP   _UART_PutString    (0875)    jmp   .PutStringLoop                          ; Get next character
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
03C7: 7F       RET                      (0879)    ret
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_Write:
                                        (0914) _UART_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
03C8: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
03C9: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
03CB: A0 13    JZ    0x03DF             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
03CD: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
03CF: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
03D1: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
03D3: 49 2B 10 TST   REG[0x2B],0x10     
03D6: AF FC    JZ    0x03D3             
03D8: 60 29    MOV   REG[0x29],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
03DA: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
03DB: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
03DD: 8F EB    JMP   0x03C9             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
03DF: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_CWrite:
                                        (0975) _UART_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
03E0: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
03E1: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
03E4: B0 06    JNZ   0x03EB             (0980)    jnz   .CW_WRITEIT
03E6: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
03E9: A0 1D    JZ    0x0407             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
03EB: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
03EC: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
03EE: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
03F0: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
03F1: 49 2B 10 TST   REG[0x2B],0x10     
03F4: AF FC    JZ    0x03F1             
03F6: 60 29    MOV   REG[0x29],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
03F8: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
03F9: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
03FC: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
03FF: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
0402: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
0405: 8F DB    JMP   0x03E1             (0995)    jmp   .CW_Loop
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
0407: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_CPutString:
                                        (1027) _UART_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
0408: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
0409: 10       PUSH  X                  (1030)    push  X
040A: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
040B: A0 0B    JZ    0x0417             (1032)    jz    .End_CPutString
040D: 9F 72    CALL  _UART_PutChar      (1033)    call  UART_PutChar                            ; Print character
040F: 20       POP   X                  (1034)    pop   X
0410: 18       POP   A                  (1035)    pop   A
0411: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
0412: DF F5    JNC   _UART_CPutString   (1037)    jnc   UART_CPutString                         ; Check for carry
0414: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
0415: 8F F2    JMP   _UART_CPutString   (1039)    jmp   UART_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
0417: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
0419: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_PutCRLF:
                                        (1071) _UART_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
041A: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
041C: 9F 63    CALL  _UART_PutChar      (1074)    call UART_PutChar
041E: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
0420: 9F 5F    CALL  _UART_PutChar      (1076)    call UART_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
0422: 7F       RET                      (1078)    ret
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_CmdReset:
                                        (1119) _UART_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_aRxBuffer
                                        (1122)    mov [UART_aRxBuffer], 0x00
                                        (1123)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1124)    mov [UART_bRxCnt], 0x00
                                        (1125)    and [UART_fStatus], 0x00
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
                                        (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1129)    ret
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_bCmdCheck:
                                        (1162) _UART_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1165)    mov A,  [UART_fStatus]
                                        (1166)    and A, UART_RX_BUF_CMDTERM                    ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1168)    ret
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_bErrCheck:
                                        (1206) _UART_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1209)    mov A,  [UART_fStatus]
                                        (1210)    and A, UART_RX_BUF_ERROR                      ; Mask off Error status
                                        (1211)    and [UART_fStatus], ~UART_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1213)    ret
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_bCmdLength:
                                        (1241) _UART_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1244)    mov A,  [UART_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1246)    ret
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_szGetParam:
                                        (1299) _UART_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
                                        (1304)    mov   A, <UART_aRxBuffer                 ; Get address to receive buffer
                                        (1305)    add   A, [ptrParam]                      ; Add string offset
                                        (1306)    mov   X, A
                                        (1307)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (1308)    mov   A, [X]                             ; Get character pointed by X
                                        (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
                                        (1310)    push  X                                  ;       Yes, Save LSB of current pointer
                                        (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
                                        (1315)    cmp   A, UART_DELIMITER                  ; Do we have a delimiter?
                                        (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
                                        (1317)    inc   X                                  ;   Yes, Increment both index and...
                                        (1318)    inc   [ptrParam]                         ;          the stored pointer.
                                        (1319)    mov   A, [X]                             ; Get character pointed by X
                                        (1320)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; End of buffer?
                                        (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
                                        (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
                                        (1326)    mov   [X], 0x00                          ; Make sure string is zero
                                        (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
                                        (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
                                        (1333)    inc   X                                  ; Advance pointers.
                                        (1334)    inc   [ptrParam]
                                        (1335)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1336)    jz    .TerminateString
                                        (1337)    mov   A, [X]                             ; Get next character
                                        (1338)    jz    .End_GetNextParam
                                        (1339)    cmp   A, UART_DELIMITER                  ; Check if we have a delimiter
                                        (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
                                        (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
                                        (1342)    inc   [ptrParam]
                                        (1343)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
                                        (1345)    mov   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
                                        (1348)    pop   X
                                        (1349)    push  X
                                        (1350)    cmp   [X], 0x00
                                        (1351)    jnz   .NotNullString
                                        (1352)    pop   X
                                        (1353)    mov   X, 0x00
                                        (1354)    mov   A, X
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
                                        (1360)    pop  X
                                        (1361)    mov  A, >UART_aRxBuffer                  ; Return pointer
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1364)    ret
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_szGetRestOfParams:
                                        (1393) _UART_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
                                        (1396)    mov  A, <UART_aRxBuffer                  ; Get address to receive buffer
                                        (1397)    add  A, [ptrParam]                       ; Add string offset
                                        (1398)    mov  X,A
                                        (1399)    mov  A,>UART_aRxBuffer                   ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART.asm
FILE: lib\pwm8.asm                      (0001) ;;*****************************************************************************
0423: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8.asm
                                        (0004) ;;   Version: 2.60, Updated on 2011/12/1 at 17:23:6
                                        (0005) ;;  Generated by PSoC Designer 5.2.2401
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_EnableInt
                                        (0030) export _PWM8_EnableInt
                                        (0031) export  PWM8_DisableInt
                                        (0032) export _PWM8_DisableInt
                                        (0033) export  PWM8_Start
                                        (0034) export _PWM8_Start
                                        (0035) export  PWM8_Stop
                                        (0036) export _PWM8_Stop
                                        (0037) export  PWM8_WritePeriod
                                        (0038) export _PWM8_WritePeriod
                                        (0039) export  PWM8_WritePulseWidth
                                        (0040) export _PWM8_WritePulseWidth
                                        (0041) export  PWM8_bReadPulseWidth
                                        (0042) export _PWM8_bReadPulseWidth
                                        (0043) export  PWM8_bReadCounter
                                        (0044) export _PWM8_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA serialtest1_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_EnableInt:
                                        (0091) _PWM8_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0426: 7F       RET                      (0095)    ret
0427: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_DisableInt:
                                        (0119) _PWM8_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
042A: 7F       RET                      (0123)    ret
042B: 43 27 01 OR    REG[0x27],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_Start:
                                        (0148) _PWM8_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
042E: 7F       RET                      (0152)    ret
042F: 41 27 FE AND   REG[0x27],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_Stop:
                                        (0176) _PWM8_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0432: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_WritePeriod:
                                        (0206) _PWM8_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0433: 60 25    MOV   REG[0x25],A        (0208)    mov   reg[PWM8_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
0435: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_WritePulseWidth:
                                        (0233) _PWM8_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
0436: 60 26    MOV   REG[0x26],A        (0235)    mov   reg[PWM8_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
0438: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_bReadPulseWidth:
                                        (0260) _PWM8_bReadPulseWidth:
                                        (0261)  bPWM8_ReadPulseWidth:                           ; this name deprecated
                                        (0262) _bPWM8_ReadPulseWidth:                           ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
0439: 5D 26    MOV   A,REG[0x26]        (0264)    mov   A, reg[PWM8_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
043B: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_bReadCounter:
                                        (0293) _PWM8_bReadCounter:
                                        (0294)  bPWM8_ReadCounter:                              ; this name deprecated
                                        (0295) _bPWM8_ReadCounter:                              ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
043C: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
043D: 5D 26    MOV   A,REG[0x26]        (0304)    mov   A, reg[PWM8_COMPARE_REG]                ; Save the Compare register on the stack
043F: 08       PUSH  A                  (0305)    push  A                                       ;
0440: 41 27 FE AND   REG[0x27],0xFE     
0443: 71 10    OR    F,0x10             
                                        (0306)    PWM8_Stop_M                                   ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
0445: 5D 25    MOV   A,REG[0x25]        (0308)    mov   A, reg[PWM8_INPUT_REG]                  ; save the clock input setting
0447: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
0448: 62 25 00 MOV   REG[0x25],0x0      (0311)    mov   reg[PWM8_INPUT_REG], INPUT_REG_NULL
044B: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
044D: 5D 24    MOV   A,REG[0x24]        (0314)    mov   A, reg[PWM8_COUNTER_REG]                ; DR2 <- DR0
044F: 5D 26    MOV   A,REG[0x26]        (0315)    mov   A, reg[PWM8_COMPARE_REG]                ; Stash the Count on the stack
0451: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
0452: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
0454: 60 26    MOV   REG[0x26],A        (0318)    mov   reg[PWM8_COMPARE_REG], A
0456: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
0458: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
045A: 60 25    MOV   REG[0x25],A        (0321)    mov   reg[PWM8_INPUT_REG], A                  ;
045C: 70 EF    AND   F,0xEF             
045E: 43 27 01 OR    REG[0x27],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_Start_M                                  ;   then re-enable the PWM.
0461: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
0462: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
0464: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8.asm
FILE: lib\pga_1.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA_1.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2011/12/1 at 17:23:1
                                        (0005) ;;  Generated by PSoC Designer 5.2.2401
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA_1.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_1_Start
                                        (0060) export _PGA_1_Start
                                        (0061) export  PGA_1_SetPower
                                        (0062) export _PGA_1_SetPower
                                        (0063) 
                                        (0064) export  PGA_1_SetGain
                                        (0065) export _PGA_1_SetGain
                                        (0066) 
                                        (0067) export  PGA_1_Stop
                                        (0068) export _PGA_1_Stop
                                        (0069) 
                                        (0070) IF (PGA_1_AGNDBUFAPI)
                                        (0071) export  PGA_1_EnableAGNDBuffer
                                        (0072) export _PGA_1_EnableAGNDBuffer
                                        (0073) export  PGA_1_DisableAGNDBuffer
                                        (0074) export _PGA_1_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_1_Start
                                        (0092) ;  FUNCTION NAME: PGA_1_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_1_Start:
                                        (0111) _PGA_1_Start:
                                        (0112)  PGA_1_SetPower:
                                        (0113) _PGA_1_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
0465: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
0467: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
0468: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
0469: 5D 73    MOV   A,REG[0x73]        (0120)    mov  A, reg[PGA_1_GAIN_CR2]                             ; read power value
046B: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
046D: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
046F: 60 73    MOV   REG[0x73],A        (0123)    mov  reg[PGA_1_GAIN_CR2], A                        ; move complete value back to register
0471: 18       POP   A                  (0124)    pop  A
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
0472: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_1_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_1_SetGain:
                                        (0154) _PGA_1_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
0473: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
0475: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
0476: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
0477: 5D 71    MOV   A,REG[0x71]        (0161)    mov  A, reg[PGA_1_GAIN_CR0]                             ; read mux settings
0479: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
047B: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
047E: B0 0A    JNZ   0x0489             (0164)    jnz  .SETHIGHGAIN
0480: 41 70 FE AND   REG[0x70],0xFE     (0165)    and  reg[PGA_1_GAIN_CR3],~EXGAIN                        ; Clear High Gain bit.
0483: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
0485: 60 71    MOV   REG[0x71],A        (0167)    mov  reg[PGA_1_GAIN_CR0], A                             ; move complete value back to register
0487: 18       POP   A                  (0168)    pop  A
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
0488: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
0489: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
048C: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
048E: 60 71    MOV   REG[0x71],A        (0175)    mov  reg[PGA_1_GAIN_CR0], A                             ; move complete value back to register
0490: 43 70 01 OR    REG[0x70],0x1      (0176)    or   reg[PGA_1_GAIN_CR3], EXGAIN                        ; Set High Gain bit.
0493: 18       POP   A                  (0177)    pop  A
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
0494: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_1_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_1_Stop:
                                        (0203) _PGA_1_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
0495: 41 73 FC AND   REG[0x73],0xFC     (0206)    and REG[PGA_1_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
0498: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_1_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_1_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_1_EnableAGNDBuffer:
                                        (0233) _PGA_1_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_1_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_1_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_1_DisableAGNDBuffer:
                                        (0261) _PGA_1_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_1_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA_1.asm
FILE: lib\dac6.asm                      (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: DAC6.asm
                                        (0004) ;;   Version: 4.3, Updated on 2011/12/1 at 17:22:24
                                        (0005) ;;  Generated by PSoC Designer 5.2.2401
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DAC6 User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "DAC6.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "m8c.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) 
                                        (0030) export  DAC6_Start
                                        (0031) export _DAC6_Start
                                        (0032) export  DAC6_SetPower
                                        (0033) export _DAC6_SetPower
                                        (0034) 
                                        (0035) export  DAC6_WriteBlind
                                        (0036) export _DAC6_WriteBlind
                                        (0037) export  DAC6_WriteStall
                                        (0038) export _DAC6_WriteStall
                                        (0039) 
                                        (0040) export  DAC6_Stop
                                        (0041) export _DAC6_Stop
                                        (0042) 
                                        (0043) ;; -----------------------------------------------------------------
                                        (0044) ;;                         Register Definitions
                                        (0045) ;; -----------------------------------------------------------------
                                        (0046) ;;
                                        (0047) ;; Uses 1 Switched Cap Block configured as shown. This API depends
                                        (0048) ;; on knowing the exact personalization of CR0 and CR3 bitfields
                                        (0049) ;; for time efficiency.
                                        (0050) ;;
                                        (0051) ;; * For a Mask/Val pair, this simply indicates that the value is
                                        (0052) ;;   determined by the user either through config-time parameteriza-
                                        (0053) ;;   tion or run-time manipulation.
                                        (0054) ;;
                                        (0055) ;; BIT FIELD         Mask/Val Function
                                        (0056) ;; -----------------    ----- --------------------
                                        (0057) ;; CR0.FCap             80/1  Feedback cap size 32
                                        (0058) ;; CR0.ClockPhase       40/0  Normal phase
                                        (0059) ;; CR0.ASign            20/*  User parameter
                                        (0060) ;; CR0.ACap             1F/*  User parameter
                                        (0061) ;;
                                        (0062) ;; CR1.ACMux            E0/2  (SCA) A:VRef High, C:Don't Care
                                        (0063) ;; CR1.AMux             E0/4  (SCB) VRef High
                                        (0064) ;; CR1.BCap             1F/0  Prune B-input branch
                                        (0065) ;;
                                        (0066) ;; CR2.AnalogBus        80/*  User Parameter: Output Bus Enable
                                        (0067) ;; CR2.CmpBus           40/0  Comparator Bus Disable
                                        (0068) ;; CR2.AutoZero         20/1  Auto-Zero enabled on Phi 1
                                        (0069) ;; CR2.CCap             1F/0  Prune C-input branch
                                        (0070) ;;
                                        (0071) ;; CR3.ARefSelect       C0/0  Use AGND (to invert)
                                        (0072) ;; CR3.FSW1             20/1  Feedback Cap Used
                                        (0073) ;; CR3.FSW2             10/1  Feedback Cap Grounded for AZ
                                        (0074) ;; CR3.BMux             0C/0  (SCA) Don't Care - this branch pruned
                                        (0075) ;; CR3.BSW              08/0  (SCB) Don't Care - this branch pruned
                                        (0076) ;; CR3.BMux             04/0  (SCB) Don't Care - this branch pruned
                                        (0077) ;; CR3.PWR              03/*  User Parameter: Power, def=OFF
                                        (0078) ;;
                                        (0079) 
                                        (0080) ;-----------------------------------------------
                                        (0081) ;  Constant Definitions
                                        (0082) ;-----------------------------------------------
                                        (0083) cOFFSET:   equ 31               ; Conversion term for offset binary to 2's C
                                        (0084) bPWRMASK:  equ 03h              ; Power bitfield in Switched Cap CR3 reg
                                        (0085) bCR3:      equ 30h              ; Except for power bits, CR3 ALWAYS looks
                                        (0086)                                 ;    like this regardless of SC block type
                                        (0087)                                 ;    or where the DAC gets mapped.
                                        (0088) 
                                        (0089) 
                                        (0090) AREA UserModules (ROM, REL)
                                        (0091) 
                                        (0092) .SECTION
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ;  FUNCTION NAME: DAC6_Start
                                        (0095) ;  FUNCTION NAME: DAC6_SetPower
                                        (0096) ;
                                        (0097) ;  DESCRIPTION:
                                        (0098) ;    Start / SetPower - Applies power setting to the module's SC blocks
                                        (0099) ;
                                        (0100) ;-----------------------------------------------------------------------------
                                        (0101) ;
                                        (0102) ;  ARGUMENTS:
                                        (0103) ;    A contains the power setting 0=Off, 1=Low, 2=Med, 3=High
                                        (0104) ;
                                        (0105) ;  RETURNS: none
                                        (0106) ;
                                        (0107) ;  SIDE EFFECTS:
                                        (0108) ;    The A and X registers may be modified by this or future implementations
                                        (0109) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0110) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0111) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0112) ;    functions.
                                        (0113) ;
                                        (0114)  DAC6_Start:
                                        (0115) _DAC6_Start:
                                        (0116)  DAC6_SetPower:
                                        (0117) _DAC6_SetPower:
                                        (0118)         RAM_PROLOGUE RAM_USE_CLASS_1 
0499: 21 03    AND   A,0x3              (0119)         and A, bPWRMASK
049B: 29 30    OR    A,0x30             (0120)         or  A, bCR3             ; Set all other bits in addition to power
049D: 60 87    MOV   REG[0x87],A        (0121)         mov reg[DAC6_CR3], A
                                        (0122)         RAM_EPILOGUE RAM_USE_CLASS_1 
049F: 7F       RET                      (0123)         ret
                                        (0124) .ENDSECTION
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: DAC6_WriteBlind
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;    Modify the DAC's update value without worrying about the clocks
                                        (0132) ;    Lowest overhead, but output may not settle to correct value until the
                                        (0133) ;    phi2 of next full cycle following the write.
                                        (0134) ;
                                        (0135) ;-----------------------------------------------------------------------------
                                        (0136) ;
                                        (0137) ;  ARGUMENTS:
                                        (0138) ;    The accumulator, A, contains the input in the appropriate format.
                                        (0139) ;    The data format is determined by the setting of the DataFormat parameter
                                        (0140) ;    in the Device Editor.
                                        (0141) ;
                                        (0142) ;  RETURNS: none
                                        (0143) ;
                                        (0144) ;  SIDE EFFECTS:
                                        (0145) ;    The A and X registers may be modified by this or future implementations
                                        (0146) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0147) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0148) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0149) ;    functions.
                                        (0150) ;
                                        (0151)  DAC6_WriteBlind:
                                        (0152) _DAC6_WriteBlind:
                                        (0153) 
                                        (0154)   RAM_PROLOGUE RAM_USE_CLASS_1 
                                        (0155)   IF DAC6_OFFSETBINARY
                                        (0156)     ;; Data is an unsigned byte value in [0..62] (i.e., 63 unique values).
                                        (0157)     ;; Following converts it to 2's complement:
04A0: 11 1F    SUB   A,0x1F             (0158)     sub  A, cOFFSET         ; Apply the offset
                                        (0159)   ENDIF
                                        (0160)   IF DAC6_OFFSETBINARY | DAC6_TWOSCOMPLEMENT
                                        (0161)     ;; Data is a byte in standard 2's complement form with value in [-31..+31]
                                        (0162)     ;; Following converts it to Sign & Magnitude form "00smmmmm"
                                        (0163)     ;;   where sign, "s", is 1 for negative numbers; 0 for positive
                                        (0164)     ;;   and "m" is the magnitude.
04A2: 64       ASL   A                  (0165)     asl  A                  ; Multiply by 2 and put sign in Carry flag
04A3: D0 07    JNC   0x04AB             (0166)     jnc  BlindPositive
                                        (0167)     ;; Neg to pos by "Invert & Add 1" procedure, but data is shifted!
04A5: 73       CPL   A                  (0168)     cpl  A                  ; bit 0 is a "1" so, following 1 byte "inc" works
04A6: 74       INC   A                  (0169)     inc  A                  ;   (otherwise, we'd have to "add A, 2")
04A7: 29 40    OR    A,0x40             (0170)     or   A, 40h             ; Make it negative by forcing sign bit
04A9: 80 06    JMP   0x04B0             (0171)     jmp  BlindMagSet
                                        (0172) BlindPositive:
04AB: 40       NOP                      (0173)     nop
04AC: 40       NOP                      (0174)     nop
04AD: 40       NOP                      (0175)     nop
04AE: 80 01    JMP   0x04B0             (0176)     jmp  BlindMagSet
                                        (0177) BlindMagSet:
04B0: 67       ASR   A                  (0178)     asr  A                  ; Divide by two to finish up
                                        (0179)   ENDIF
                                        (0180) 
                                        (0181)     ;; Data is in Sign & Magnitude form.
                                        (0182)     ;; Set FCap and ClockPhase bits
04B1: 29 80    OR    A,0x80             (0183)     or   A, DAC6_CR0_HIBITS
04B3: 60 84    MOV   REG[0x84],A        (0184)     mov  reg[DAC6_CR0], A
                                        (0185)     RAM_EPILOGUE RAM_USE_CLASS_1 
04B5: 7F       RET                      (0186)     ret
                                        (0187) .ENDSECTION
                                        (0188) 
                                        (0189) .SECTION
                                        (0190) ;-----------------------------------------------------------------------------
                                        (0191) ;  FUNCTION NAME: DAC6_WriteStall
                                        (0192) ;
                                        (0193) ;  DESCRIPTION:
                                        (0194) ;    Modify the DAC's update value, stalling the CPU if necessary.
                                        (0195) ;    This routine should be used with fast analog clocks or when the
                                        (0196) ;    resulting interrupt latencies, comparable to the update period,
                                        (0197) ;    can be tolerated comfortably.
                                        (0198) ;
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS:
                                        (0202) ;    The accumulator, A, contains the input in the appropriate format.
                                        (0203) ;    The data format is determined by the setting of the DataFormat parameter
                                        (0204) ;    in the Device Editor.
                                        (0205) ;
                                        (0206) ;  RETURNS: none
                                        (0207) ;
                                        (0208) ;  SIDE EFFECTS:
                                        (0209) ;    The A and X registers may be modified by this or future implementations
                                        (0210) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0211) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0212) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0213) ;    functions.    
                                        (0214) ;
                                        (0215) 
                                        (0216)  DAC6_WriteStall:
                                        (0217) _DAC6_WriteStall:
                                        (0218) 
                                        (0219)   RAM_PROLOGUE RAM_USE_CLASS_1 
                                        (0220)   IF DAC6_OFFSETBINARY
                                        (0221)     ;; Data is an unsigned byte value in [0..62] (i.e., 63 unique values).
                                        (0222)     ;; Following converts it to 2's complement:
04B6: 11 1F    SUB   A,0x1F             (0223)     sub  A, cOFFSET         ; Apply the offset
                                        (0224)   ENDIF
                                        (0225)   IF DAC6_OFFSETBINARY | DAC6_TWOSCOMPLEMENT
                                        (0226)     ;; Data is a byte in standard 2's complement form with value in [-31..+31]
                                        (0227)     ;; Following converts it to Sign & Magnitude form "00smmmmm"
                                        (0228)     ;;   where sign, "s", is 1 for negative numbers; 0 for positive
                                        (0229)     ;;   and "m" is the magnitude.
04B8: 64       ASL   A                  (0230)     asl  A                  ; Multiply by 2 and put sign in Carry flag
04B9: D0 07    JNC   0x04C1             (0231)     jnc  StallPositive
04BB: 73       CPL   A                  (0232)     cpl  A                  ; "Invert" step of complement 2's complement
04BC: 74       INC   A                  (0233)     inc  A                  ; "Add 1"  step of complement 2's complement
04BD: 29 40    OR    A,0x40             (0234)     or   A, 40h             ; Make it negative
04BF: 80 06    JMP   0x04C6             (0235)     jmp  StallMagSet
                                        (0236) StallPositive:
04C1: 40       NOP                      (0237)     nop
04C2: 40       NOP                      (0238)     nop
04C3: 40       NOP                      (0239)     nop
04C4: 80 01    JMP   0x04C6             (0240)     jmp  StallMagSet
                                        (0241) StallMagSet:
04C6: 67       ASR   A                  (0242)     asr  A                  ; Divide by two to finish conversion
                                        (0243)   ENDIF
                                        (0244) 
                                        (0245)     ;; Data is in Sign & Magnitude form.
                                        (0246)     ;; Set FCap and ClockPhase bits
04C7: 29 80    OR    A,0x80             (0247)     or   A, DAC6_CR0_HIBITS
04C9: 43 65 01 OR    REG[0x65],0x1      
                                        (0248)     M8C_Stall
04CC: 60 84    MOV   REG[0x84],A        (0249)     mov  reg[DAC6_CR0], A
04CE: 41 65 FE AND   REG[0x65],0xFE     
                                        (0250)     M8C_Unstall
                                        (0251)     RAM_EPILOGUE RAM_USE_CLASS_1 
04D1: 7F       RET                      (0252)     ret
                                        (0253) .ENDSECTION
                                        (0254) 
                                        (0255) .SECTION
                                        (0256) ;-----------------------------------------------------------------------------
                                        (0257) ;  FUNCTION NAME: DAC6_Stop
                                        (0258) ;
                                        (0259) ;  DESCRIPTION:
                                        (0260) ;    Turns off power to the SC block
                                        (0261) ;
                                        (0262) ;-----------------------------------------------------------------------------
                                        (0263) ;
                                        (0264) ;  ARGUMENTS: none
                                        (0265) ;
                                        (0266) ;  RETURNS: none
                                        (0267) ;
                                        (0268) ;  SIDE EFFECTS:
                                        (0269) ;    The A and X registers may be modified by this or future implementations
                                        (0270) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0271) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0272) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0273) ;    functions.
                                        (0274) ;
                                        (0275) 
                                        (0276)  DAC6_Stop:
                                        (0277) _DAC6_Stop:
                                        (0278)     RAM_PROLOGUE RAM_USE_CLASS_1 
04D2: 41 87 FC AND   REG[0x87],0xFC     (0279)     and reg[DAC6_CR3], ~bPWRMASK
                                        (0280)     RAM_EPILOGUE RAM_USE_CLASS_1 
04D5: 7F       RET                      (0281)     ret
                                        (0282) .ENDSECTION
                                        (0283) 
                                        (0284) ; End of File DAC6.asm
FILE: lib\adcincint.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ADCINCINT.asm
                                        (0004) ;;  Version: 1.20, Updated on 2011/12/1 at 17:19:45
                                        (0005) ;;
                                        (0006) ;;  DESCRIPTION: Assembler interrupt service routine for the ADCINC
                                        (0007) ;;               A/D Converter User Module. This code works for both the
                                        (0008) ;;               first and second-order modulator topologies.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "ADCINC.inc"
                                        (0017) 
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) 
                                        (0023) export _ADCINC_ADConversion_ISR
                                        (0024) 
                                        (0025) export _ADCINC_iResult
                                        (0026) export  ADCINC_iResult
                                        (0027) export _ADCINC_fStatus
                                        (0028) export  ADCINC_fStatus
                                        (0029) export _ADCINC_bState
                                        (0030) export  ADCINC_bState
                                        (0031) export _ADCINC_fMode
                                        (0032) export  ADCINC_fMode
                                        (0033) export _ADCINC_bNumSamples
                                        (0034) export  ADCINC_bNumSamples
                                        (0035) 
                                        (0036) ;-----------------------------------------------
                                        (0037) ; Variable Allocation
                                        (0038) ;-----------------------------------------------
                                        (0039) AREA InterruptRAM(RAM,REL)
                                        (0040)  ADCINC_iResult:
                                        (0041) _ADCINC_iResult:                           BLK  2 ;Calculated answer
                                        (0042)   iTemp:                                   BLK  2 ;internal temp storage
                                        (0043)  ADCINC_fStatus:
                                        (0044) _ADCINC_fStatus:                           BLK  1 ;ADC Status
                                        (0045)  ADCINC_bState:
                                        (0046) _ADCINC_bState:                            BLK  1 ;State value of ADC count
                                        (0047)  ADCINC_fMode:
                                        (0048) _ADCINC_fMode:                             BLK  1 ;Integrate and reset mode.
                                        (0049)  ADCINC_bNumSamples:
                                        (0050) _ADCINC_bNumSamples:                       BLK  1 ;Number of samples to take.
                                        (0051) 
                                        (0052) ;-----------------------------------------------
                                        (0053) ;  EQUATES
                                        (0054) ;-----------------------------------------------
                                        (0055) 
                                        (0056) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0057) ;---------------------------------------------------
                                        (0058) ; Insert your custom declarations below this banner
                                        (0059) ;---------------------------------------------------
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _ADCINC_ADConversion_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION: Perform final filter operations to produce output samples.
                                        (0083) ;
                                        (0084) ;-----------------------------------------------------------------------------
                                        (0085) ;
                                        (0086) ;    The decimation rate is established by the PWM interrupt. Four timer
                                        (0087) ;    clocks elapse for each modulator output (decimator input) since the
                                        (0088) ;    phi1/phi2 generator divides by 4. This means the timer period and thus
                                        (0089) ;    it's interrupt must equal 4 times the actual decimation rate.  The
                                        (0090) ;    decimator is ru  for 2^(#bits-6).
                                        (0091) ;
                                        (0092) _ADCINC_ADConversion_ISR:
04D6: 7A 09    DEC   [0x9]              (0093)     dec  [ADCINC_bState]
                                        (0094) if1:
04D8: C0 02    JC    0x04DB             (0095)     jc endif1 ; no underflow
04DA: 7E       RETI                     (0096)     reti
                                        (0097) endif1:
04DB: 3C 0A 00 CMP   [0xA],0x0          (0098)     cmp [ADCINC_fMode],0
                                        (0099) if2: 
04DE: B0 12    JNZ   0x04F1             (0100)     jnz endif2  ;leaving reset mode
04E0: 08       PUSH  A                  (0101)     push A                            ;read decimator
04E1: 5D E5    MOV   A,REG[0xE5]        (0102)     mov  A, reg[DEC_DL]
04E3: 53 07    MOV   [0x7],A            (0103)     mov  [iTemp + LowByte],A
04E5: 5D E4    MOV   A,REG[0xE4]        (0104)     mov  A, reg[DEC_DH]
04E7: 53 06    MOV   [0x6],A            (0105)     mov  [iTemp + HighByte], A
04E9: 18       POP   A                  (0106)     pop A
04EA: 55 0A 01 MOV   [0xA],0x1          (0107)     mov [ADCINC_fMode],1
04ED: 55 09 3F MOV   [0x9],0x3F         (0108)     mov [ADCINC_bState],((1<<(ADCINC_bNUMBITS- 6))-1)
04F0: 7E       RETI                     (0109)     reti
04F1: 43 82 20 OR    REG[0x82],0x20     
04F4: 43 83 10 OR    REG[0x83],0x10     
                                        (0110) endif2:
                                        (0111)     ;This code runs at end of integrate
                                        (0112)     ADCINC_RESET_INTEGRATOR_M
04F7: 08       PUSH  A                  (0113)     push A
04F8: 5D E5    MOV   A,REG[0xE5]        (0114)     mov  A, reg[DEC_DL]
04FA: 12 07    SUB   A,[0x7]            (0115)     sub  A,[iTemp + LowByte]
04FC: 53 07    MOV   [0x7],A            (0116)     mov  [iTemp +LowByte],A
04FE: 5D E4    MOV   A,REG[0xE4]        (0117)     mov  A, reg[DEC_DH]
0500: 1A 06    SBB   A,[0x6]            (0118)     sbb  A,[iTemp + HighByte]
0502: 67       ASR   A                  (0119)     asr  A
0503: 6E 07    RRC   [0x7]              (0120)     rrc  [iTemp + LowByte]
                                        (0121) 
                                        (0122)        ;Covert to Unipolar
                                        (0123) IF  ADCINC_9_OR_MORE_BITS
0505: 01 08    ADD   A,0x8              (0124)     add  A, (1<<(ADCINC_bNUMBITS - 9))
                                        (0125) ELSE
                                        (0126)     add [iTemp + LowByte], (1<<(ADCINC_bNUMBITS - 1)) ;work on lower Byte
                                        (0127)     adc A,0 
                                        (0128) ENDIF
                                        (0129)        ;check for overflow
                                        (0130) IF     ADCINC_8_OR_MORE_BITS
0507: 39 10    CMP   A,0x10             (0131)     cmp A,(1<<(ADCINC_bNUMBITS - 8))
                                        (0132) if3: 
0509: B0 05    JNZ   0x050F             (0133)     jnz endif3 ;overflow
050B: 78       DEC   A                  (0134)     dec A
050C: 55 07 FF MOV   [0x7],0xFF         (0135)     mov [iTemp + LowByte],ffh
                                        (0136) endif3:
                                        (0137) ELSE
                                        (0138)     cmp [iTemp + LowByte],(1<<(ADCINC_bNUMBITS))
                                        (0139) if4: 
                                        (0140)     jnz endif4 ;overflow
                                        (0141)     dec [iTemp + LowByte]
                                        (0142) endif4:
                                        (0143) ENDIF
                                        (0144) IF ADCINC_SIGNED_DATA
                                        (0145) IF ADCINC_9_OR_MORE_BITS
                                        (0146)     sub A,(1<<(ADCINC_bNUMBITS - 9))
                                        (0147) ELSE
                                        (0148)     sub [iTemp +LowByte],(1<<(ADCINC_bNUMBITS - 1))
                                        (0149)     sbb A,0
                                        (0150) ENDIF
                                        (0151) ENDIF
050F: 5F 05 07 MOV   [0x5],[0x7]        (0152)     mov  [ADCINC_iResult + LowByte],[iTemp +LowByte]
0512: 53 04    MOV   [0x4],A            (0153)     mov  [ADCINC_iResult + HighByte],A
0514: 55 08 01 MOV   [0x8],0x1          (0154)     mov  [ADCINC_fStatus],1
                                        (0155) ConversionReady:
                                        (0156)     ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0157)     ;---------------------------------------------------
                                        (0158)     ; Insert your custom code below this banner
                                        (0159)     ;---------------------------------------------------
                                        (0160)     ;  Sample data is now in iResult
                                        (0161)     ;
                                        (0162)     ;  NOTE: This interrupt service routine has already
                                        (0163)     ;  preserved the values of the A CPU register. If
                                        (0164)     ;  you need to use the X register you must preserve
                                        (0165)     ;  its value and restore it before the return from
                                        (0166)     ;  interrupt.
                                        (0167) 	
0517: 5F 0C 05 MOV   [s_to_m_mem],[0x5] (0168) 	mov [0+_s_to_m_mem], [ADCINC_iResult+LowByte]
051A: 53 0D    MOV   [s_to_m_mem+1],A   (0169) 	mov [1+_s_to_m_mem], A
                                        (0170) 	
                                        (0171)     ;---------------------------------------------------
                                        (0172)     ; Insert your custom code above this banner
                                        (0173)     ;---------------------------------------------------
                                        (0174)     ;@PSoC_UserCode_END@ (Do not change this line.)
051C: 18       POP   A                  (0175)     pop A
051D: 3C 0B 00 CMP   [0xB],0x0          (0176)     cmp [ADCINC_bNumSamples],0
                                        (0177) if5: 
0520: B0 0E    JNZ   0x052F             (0178)     jnz endif5 ; Number of samples is zero
0522: 55 0A 00 MOV   [0xA],0x0          (0179)     mov [ADCINC_fMode],0
0525: 55 09 00 MOV   [0x9],0x0          (0180)     mov [ADCINC_bState],0
0528: 41 83 EF AND   REG[0x83],0xEF     
052B: 41 82 DF AND   REG[0x82],0xDF     
                                        (0181)     ADCINC_ENABLE_INTEGRATOR_M
052E: 7E       RETI                     (0182)     reti       
                                        (0183) endif5:
052F: 7A 0B    DEC   [0xB]              (0184)     dec [ADCINC_bNumSamples]
                                        (0185) if6:
0531: A0 0E    JZ    0x0540             (0186)     jz endif6  ; count not zero
0533: 55 0A 00 MOV   [0xA],0x0          (0187)     mov [ADCINC_fMode],0
0536: 55 09 00 MOV   [0x9],0x0          (0188)     mov [ADCINC_bState],0
0539: 41 83 EF AND   REG[0x83],0xEF     
053C: 41 82 DF AND   REG[0x82],0xDF     
                                        (0189)     ADCINC_ENABLE_INTEGRATOR_M
053F: 7E       RETI                     (0190)     reti       
0540: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0191) endif6:
                                        (0192)     ;All samples done
                                        (0193)     ADCINC_STOPADC_M
0543: 7E       RETI                     (0194)  reti 
FILE: lib\adcinc.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ADCINC.asm
                                        (0004) ;;   Version: 1.1, Updated on 2006/02/03 at 09:10:49
                                        (0005) ;;  Generated by PSoC Designer 5.2.2401
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Assembler source for the ADCINC A/D Converter
                                        (0008) ;;               User Module with 1st-order modulator.
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API
                                        (0014) ;;        function returns. Even though these registers may be preserved now,
                                        (0015) ;;        there is no guarantee they will be preserved in future releases.
                                        (0016) ;;-----------------------------------------------------------------------------
                                        (0017) ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0018) ;;*****************************************************************************
                                        (0019) ;;*****************************************************************************
                                        (0020) 
                                        (0021) include "m8c.inc"
                                        (0022) include "memory.inc"
                                        (0023) 
                                        (0024) include "ADCINC.inc"
                                        (0025) 
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) export  ADCINC_Start
                                        (0031) export _ADCINC_Start
                                        (0032) export  ADCINC_SetPower
                                        (0033) export _ADCINC_SetPower
                                        (0034) export  ADCINC_Stop
                                        (0035) export _ADCINC_Stop
                                        (0036) export  ADCINC_GetSamples
                                        (0037) export _ADCINC_GetSamples
                                        (0038) export  ADCINC_StopADC
                                        (0039) export _ADCINC_StopADC
                                        (0040) export  ADCINC_fIsDataAvailable
                                        (0041) export _ADCINC_fIsDataAvailable
                                        (0042) export  ADCINC_iClearFlagGetData
                                        (0043) export _ADCINC_iClearFlagGetData
                                        (0044) export  ADCINC_wClearFlagGetData
                                        (0045) export _ADCINC_wClearFlagGetData
                                        (0046) export  ADCINC_cClearFlagGetData
                                        (0047) export _ADCINC_cClearFlagGetData
                                        (0048) export  ADCINC_bClearFlagGetData
                                        (0049) export _ADCINC_bClearFlagGetData
                                        (0050) export  ADCINC_iGetData
                                        (0051) export _ADCINC_iGetData
                                        (0052) export  ADCINC_wGetData
                                        (0053) export _ADCINC_wGetData
                                        (0054) export  ADCINC_bGetData
                                        (0055) export _ADCINC_bGetData
                                        (0056) export  ADCINC_cGetData
                                        (0057) export _ADCINC_cGetData
                                        (0058) export  ADCINC_fClearFlag
                                        (0059) export _ADCINC_fClearFlag
                                        (0060) export  ADCINC_WritePulseWidth
                                        (0061) export _ADCINC_WritePulseWidth
                                        (0062) 
                                        (0063) 
                                        (0064) AREA bss (RAM,REL)
                                        (0065) 
                                        (0066) ;-----------------------------------------------
                                        (0067) ;  Constant Definitions
                                        (0068) ;-----------------------------------------------
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: ADCINC_Start
                                        (0080) ;
                                        (0081) ;  DESCRIPTION: Applies power setting to the module's analog PSoc block.
                                        (0082) ;               and starts the PWM
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;
                                        (0085) ;  ARGUMENTS:    The A register contains the power setting.
                                        (0086) ;  RETURNS:      Nothing.
                                        (0087) ;  SIDE EFFECTS:
                                        (0088) ;    The A and X registers may be modified by this or future implementations
                                        (0089) ;    of this function.  When necessary, it is the calling function's
                                        (0090) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0091) ;    functions.
                                        (0092) ;
                                        (0093)  ADCINC_Start:
                                        (0094) _ADCINC_Start:
                                        (0095)    RAM_PROLOGUE RAM_USE_CLASS_1
0544: 43 E7 C0 OR    REG[0xE7],0xC0     (0096)    or    reg[DEC_CR1],c0h
0547: 90 0D    CALL  _ADCINC_SetPower   (0097)    call  ADCINC_SetPower
0549: 43 82 20 OR    REG[0x82],0x20     
054C: 43 83 10 OR    REG[0x83],0x10     
                                        (0098)    ADCINC_RESET_INTEGRATOR_M
054F: 62 21 FF MOV   REG[0x21],0xFF     (0099)    mov   reg[ADCINC_PWMdr1],ffh
0552: 43 23 01 OR    REG[0x23],0x1      (0100)    or    reg[ADCINC_PWMcr0],01h                      ; start PWM
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
0555: 7F       RET                      (0102)    ret
                                        (0103) .ENDSECTION
                                        (0104) 
                                        (0105)    
                                        (0106) .SECTION
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;  FUNCTION NAME: ADCINC_SetPower
                                        (0109) ;
                                        (0110) ;  DESCRIPTION: Applies power setting to the module's analog PSoc block.
                                        (0111) ;-----------------------------------------------------------------------------
                                        (0112) ;
                                        (0113) ;  ARGUMENTS:    The A register contains the power setting.
                                        (0114) ;  RETURNS:      Nothing.
                                        (0115) ;  SIDE EFFECTS:
                                        (0116) ;    The A and X registers may be modified by this or future implementations
                                        (0117) ;    of this function.  When necessary, it is the calling function's
                                        (0118) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0119) ;    functions.
                                        (0120) ;
                                        (0121)  ADCINC_SetPower:
                                        (0122) _ADCINC_SetPower:
                                        (0123)    RAM_PROLOGUE RAM_USE_CLASS_2
0556: 4F       MOV   X,SP               (0124)    mov  X,SP                                     ; Set up Stack frame
0557: 21 03    AND   A,0x3              (0125)    and  A,03h                                    ; Ensure value is legal
0559: 08       PUSH  A                  (0126)    push A
055A: 5D 83    MOV   A,REG[0x83]        (0127)    mov  A,reg[ADCINC_AtoDcr3]                    ; First SC block:
055C: 21 FC    AND   A,0xFC             (0128)    and  A,~03h                                   ;   clear power bits to zero
055E: 2B 00    OR    A,[X+0]            (0129)    or   A,[ X ]                                  ;   establish new value
0560: 60 83    MOV   REG[0x83],A        (0130)    mov  reg[ADCINC_AtoDcr3],A                    ;   change the actual setting
0562: 18       POP   A                  (0131)    pop  A
                                        (0132)    RAM_EPILOGUE RAM_USE_CLASS_2
0563: 7F       RET                      (0133)    ret
0564: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0134) .ENDSECTION
                                        (0135) 
                                        (0136) .SECTION
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;  FUNCTION NAME: ADCINC_Stop
                                        (0139) ;
                                        (0140) ;  DESCRIPTION:   Removes power from the module's analog PSoc block.
                                        (0141) ;                 and turns off PWM
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:     None.
                                        (0145) ;  RETURNS:       Nothing.
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  When necessary, it is the calling function's
                                        (0149) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0150) ;    functions.
                                        (0151) ;
                                        (0152)  ADCINC_Stop:
                                        (0153) _ADCINC_Stop:
                                        (0154)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0155)    ADCINC_STOPADC_M
0567: 41 83 FC AND   REG[0x83],0xFC     (0156)    and  reg[ADCINC_AtoDcr3], ~03h
056A: 41 23 FE AND   REG[0x23],0xFE     (0157)    and  reg[ADCINC_PWMcr0], ~01h ; stop PWM
                                        (0158)    RAM_EPILOGUE RAM_USE_CLASS_1
056D: 7F       RET                      (0159)    ret
056E: 41 83 EF AND   REG[0x83],0xEF     
0571: 41 82 DF AND   REG[0x82],0xDF     
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: ADCINC_GetSamples
                                        (0166) ;
                                        (0167) ;  DESCRIPTION: Activates interrupts for this user module and begins sampling.
                                        (0168) ;-----------------------------------------------------------------------------
                                        (0169) ;
                                        (0170) ;  ARGUMENTS:    A register contain number of samples
                                        (0171) ;  RETURNS:      Nothing.
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    The A and X registers may be modified by this or future implementations
                                        (0174) ;    of this function.  When necessary, it is the calling function's
                                        (0175) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0176) ;    functions.
                                        (0177) ;          
                                        (0178)  ADCINC_GetSamples:
                                        (0179) _ADCINC_GetSamples:
                                        (0180)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0181)    RAM_SETPAGE_CUR >ADCINC_fMode
                                        (0182)    ADCINC_ENABLE_INTEGRATOR_M
0574: 55 0A 00 MOV   [0xA],0x0          (0183)    mov [ADCINC_fMode],0
0577: 55 09 00 MOV   [0x9],0x0          (0184)    mov [ADCINC_bState],0
057A: 53 0B    MOV   [0xB],A            (0185)    mov [ADCINC_bNumSamples],A
057C: 5D 22    MOV   A,REG[0x22]        (0186)    mov A, reg[ADCINC_PWMdr2]
057E: B0 04    JNZ   0x0583             (0187)    jnz  .SkipPulseWrite
0580: 62 22 01 MOV   REG[0x22],0x1      (0188)    mov reg[ADCINC_PWMdr2], 1
0583: 62 DB FE MOV   REG[0xDB],0xFE     
0586: 43 E1 01 OR    REG[0xE1],0x1      
                                        (0189) .SkipPulseWrite:
                                        (0190)    ADCINC_STARTADC_M  ;enable interrupt 
                                        (0191)    RAM_EPILOGUE RAM_USE_CLASS_4 
0589: 7F       RET                      (0192)    ret
058A: 41 E1 FE AND   REG[0xE1],0xFE     
058D: 43 82 20 OR    REG[0x82],0x20     
0590: 43 83 10 OR    REG[0x83],0x10     
                                        (0193) .ENDSECTION
                                        (0194) 
                                        (0195) 
                                        (0196) .SECTION
                                        (0197) ;-----------------------------------------------------------------------------
                                        (0198) ;  FUNCTION NAME: ADCINC_StopADC
                                        (0199) ;
                                        (0200) ;  DESCRIPTION: Shuts down the A/D is an orderly manner.  The interrupt
                                        (0201) ;               is disabled but the PWM output is still active.
                                        (0202) ;               Integrator is reset
                                        (0203) ;-----------------------------------------------------------------------------
                                        (0204) ;
                                        (0205) ;  ARGUMENTS:    None.
                                        (0206) ;  RETURNS:      Nothing.
                                        (0207) ;  SIDE EFFECTS:
                                        (0208) ;    The A and X registers may be modified by this or future implementations
                                        (0209) ;    of this function.  When necessary, it is the calling function's
                                        (0210) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0211) ;    functions.
                                        (0212) ;
                                        (0213)  ADCINC_StopADC:
                                        (0214) _ADCINC_StopADC:
                                        (0215)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0216)    ADCINC_STOPADC_M
                                        (0217)    ADCINC_RESET_INTEGRATOR_M
                                        (0218)    RAM_EPILOGUE RAM_USE_CLASS_1 
0593: 7F       RET                      (0219)  ret
0594: 51 08    MOV   A,[0x8]            
                                        (0220) .ENDSECTION
                                        (0221) 
                                        (0222) 
                                        (0223) .SECTION
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  FUNCTION NAME: ADCINC_fIsDataAvailable
                                        (0226) ;
                                        (0227) ;  DESCRIPTION: Returns the status of the A/D Data
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  ARGUMENTS:    None.
                                        (0230) ;  RETURNS:      fastcall BOOL DataAvailable returned in the A register
                                        (0231) ;  SIDE EFFECTS:
                                        (0232) ;    The A and X registers may be modified by this or future implementations
                                        (0233) ;    of this function.  When necessary, it is the calling function's
                                        (0234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0235) ;    functions.
                                        (0236) ;          
                                        (0237)  ADCINC_fIsDataAvailable:
                                        (0238) _ADCINC_fIsDataAvailable:
                                        (0239)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0240)    ADCINC_fIsDataAvailable_M   
                                        (0241)    RAM_EPILOGUE RAM_USE_CLASS_4
0596: 7F       RET                      (0242)    ret
0597: 55 08 00 MOV   [0x8],0x0          
059A: 58 04    MOV   X,[0x4]            
059C: 51 05    MOV   A,[0x5]            
059E: 3C 08 00 CMP   [0x8],0x0          
05A1: BF F5    JNZ   _ADCINC_iClearFlagGetData|ADCINC_wClearFlagGetData|_ADCINC_wClearFlagGetData|ADCINC_iClearFlagGetData
                                        (0243) .ENDSECTION
                                        (0244) 
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME:  ADCINC_iClearFlagGetData
                                        (0249) ;                  ADCINC_wClearFlagGetData
                                        (0250) ;
                                        (0251) ;  DESCRIPTION:    Clears the fStatus and places ADC data in iResult A/D.
                                        (0252) ;                  Flag is checked after trandfer to insure valid data.
                                        (0253) ;                  available. Also clears the DATA_READY flag. 
                                        (0254) ;-----------------------------------------------------------------------------
                                        (0255) ;  ARGUMENTS:    None.
                                        (0256) ;  RETURNS:      fastcall int iResult returned in the X and A register
                                        (0257) ;  SIDE EFFECTS:
                                        (0258) ;    The A and X registers may be modified by this or future implementations
                                        (0259) ;    of this function.  When necessary, it is the calling function's
                                        (0260) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0261) ;    functions.
                                        (0262) ;          
                                        (0263)  ADCINC_iClearFlagGetData:
                                        (0264) _ADCINC_iClearFlagGetData:
                                        (0265)  ADCINC_wClearFlagGetData:
                                        (0266) _ADCINC_wClearFlagGetData:
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0268)    ADCINC_iClearFlagGetData_M   
                                        (0269)    RAM_EPILOGUE RAM_USE_CLASS_4
05A3: 7F       RET                      (0270)    ret
05A4: 55 08 00 MOV   [0x8],0x0          
05A7: 51 05    MOV   A,[0x5]            
                                        (0271) .ENDSECTION
                                        (0272) 
                                        (0273) 
                                        (0274) .SECTION
                                        (0275) ;-----------------------------------------------------------------------------
                                        (0276) ;  FUNCTION NAME:  ADCINC_cClearFlagGetData
                                        (0277) ;                  ADCINC_bClearFlagGetData
                                        (0278) ;
                                        (0279) ;  DESCRIPTION:    Clears the fStatus and places ADC data in iResult A/D.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;  ARGUMENTS:    None.
                                        (0282) ;  RETURNS:      fastcall int iResult returned in the X and A register
                                        (0283) ;  SIDE EFFECTS:
                                        (0284) ;    The A and X registers may be modified by this or future implementations
                                        (0285) ;    of this function.  When necessary, it is the calling function's
                                        (0286) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0287) ;    functions.
                                        (0288) ;          
                                        (0289)  ADCINC_cClearFlagGetData:
                                        (0290) _ADCINC_cClearFlagGetData:
                                        (0291)  ADCINC_bClearFlagGetData:
                                        (0292) _ADCINC_bClearFlagGetData:
                                        (0293)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0294)    ADCINC_bClearFlagGetData_M     
                                        (0295)    RAM_EPILOGUE RAM_USE_CLASS_4
05A9: 7F       RET                      (0296)    ret
05AA: 58 04    MOV   X,[0x4]            
05AC: 51 05    MOV   A,[0x5]            
                                        (0297) .ENDSECTION
                                        (0298) .SECTION
                                        (0299) ;-----------------------------------------------------------------------------
                                        (0300) ;  FUNCTION NAME:  ADCINC_iGetData
                                        (0301) ;                  ADCINC_wGetData
                                        (0302) ;
                                        (0303) ;  DESCRIPTION:     Returns the data from the A/D.  Does not check if data is
                                        (0304) ;                   available.
                                        (0305) ;-----------------------------------------------------------------------------
                                        (0306) ;  ARGUMENTS:    None.
                                        (0307) ;  RETURNS:      fastcall int iResult is returned in the X,A registers
                                        (0308) ;  SIDE EFFECTS:
                                        (0309) ;    The A and X registers may be modified by this or future implementations
                                        (0310) ;    of this function.  When necessary, it is the calling function's
                                        (0311) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0312) ;    functions.
                                        (0313) ;          
                                        (0314)  ADCINC_iGetData:
                                        (0315) _ADCINC_iGetData:
                                        (0316)  ADCINC_wGetData:
                                        (0317) _ADCINC_wGetData:
                                        (0318)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0319)    ADCINC_wGetData_M          
                                        (0320)    RAM_EPILOGUE RAM_USE_CLASS_4
05AE: 7F       RET                      (0321)    ret
05AF: 51 05    MOV   A,[0x5]            
                                        (0322) .ENDSECTION
                                        (0323) .SECTION
                                        (0324) ;-----------------------------------------------------------------------------
                                        (0325) ;  FUNCTION NAME:  ADCINC_bGetData
                                        (0326) ;                  ADCINC_cGetData
                                        (0327) ;
                                        (0328) ;  DESCRIPTION:     Returns the data from the A/D.  Does not check if data is
                                        (0329) ;                   available.
                                        (0330) ;-----------------------------------------------------------------------------
                                        (0331) ;  ARGUMENTS:    None.
                                        (0332) ;  RETURNS:      fastcall CHAR cData returned in the A register
                                        (0333) ;  SIDE EFFECTS:
                                        (0334) ;    The A and X registers may be modified by this or future implementations
                                        (0335) ;    of this function.  When necessary, it is the calling function's
                                        (0336) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0337) ;    functions.
                                        (0338) ;          
                                        (0339)  ADCINC_bGetData:
                                        (0340) _ADCINC_bGetData:
                                        (0341)  ADCINC_cGetData:
                                        (0342) _ADCINC_cGetData:
                                        (0343)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0344)    ADCINC_cGetData_M        
                                        (0345)    RAM_EPILOGUE RAM_USE_CLASS_4
05B1: 7F       RET                      (0346)    ret
05B2: 51 08    MOV   A,[0x8]            
05B4: 55 08 00 MOV   [0x8],0x0          
                                        (0347) .ENDSECTION
                                        (0348) 
                                        (0349) 
                                        (0350) .SECTION
                                        (0351) ;-----------------------------------------------------------------------------
                                        (0352) ;  FUNCTION NAME: ADCINC_fClearFlag
                                        (0353) ;
                                        (0354) ;  DESCRIPTION: Clears the data ready flag.
                                        (0355) ;-----------------------------------------------------------------------------
                                        (0356) ;  ARGUMENTS:    None.
                                        (0357) ;  RETURNS:      Nothing.
                                        (0358) ;  SIDE EFFECTS: 
                                        (0359) ;    The DATA_READY flag is cleared.
                                        (0360) ;    The A and X registers may be modified by this or future implementations
                                        (0361) ;    of this function.  When necessary, it is the calling function's
                                        (0362) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0363) ;    functions.
                                        (0364) ;          
                                        (0365)  ADCINC_fClearFlag:
                                        (0366) _ADCINC_fClearFlag:
                                        (0367)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0368)    ADCINC_fClearFlag_M    
                                        (0369)    RAM_EPILOGUE RAM_USE_CLASS_4
05B7: 7F       RET                      (0370)    ret
05B8: 60 22    MOV   REG[0x22],A        
                                        (0371) .ENDSECTION
                                        (0372) 
                                        (0373) 
                                        (0374) .SECTION
                                        (0375) ;-----------------------------------------------------------------------------
                                        (0376) ;  FUNCTION NAME: ADCINC_WritePulseWidth
                                        (0377) ;
                                        (0378) ;  DESCRIPTION:
                                        (0379) ;     Write the 8-bit period value into the compare register (DR2).
                                        (0380) ;-----------------------------------------------------------------------------
                                        (0381) ;
                                        (0382) ;  ARGUMENTS: fastcall BYTE bPeriodValue (passed in A)
                                        (0383) ;  RETURNS:   Nothing
                                        (0384) ;  SIDE EFFECTS:
                                        (0385) ;    The A and X registers may be modified by this or future implementations
                                        (0386) ;    of this function.  When necessary, it is the calling function's
                                        (0387) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0388) ;    functions.
                                        (0389) ;
                                        (0390)  ADCINC_WritePulseWidth:
                                        (0391) _ADCINC_WritePulseWidth:
                                        (0392)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0393)    ADCINC_WritePulseWidth_M  
                                        (0394)    RAM_EPILOGUE RAM_USE_CLASS_1
05BA: 7F       RET                      (0395)    ret
                                        (0396) .ENDSECTION
                                        (0397) 
                                        (0398) ; End of File ADCINC.asm
FILE: C:\Users\jwhong\DOCUME~1\CHAMPI~1\Firmware\SERIAL~1\SERIAL~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) 
(0008) unsigned char target_address;
(0009) unsigned char bytes_received = 0;
(0010) unsigned char expected_bytes;
(0011) 
(0012) unsigned char ext_mem_locked = 0;
(0013) unsigned char m_to_s_offset = 0;
(0014) /********
(0015) m_to_s_memory map
(0016) 0:  Desired PWM duty cycle
(0017) ********/
(0018) unsigned char m_to_s_mem[32];
(0019) /********
(0020) s_to_m_memory map
(0021) 0:  Low  byte, ADC in
(0022) 1:  High byte, ADC in
(0023) ********/
(0024) unsigned char s_to_m_mem[32];
(0025) 
(0026) extern BYTE DELSIG8_bfStatus;
(0027) extern BYTE DELSIG8_cResult;
(0028) 
(0029) void main(void)
(0030) {
__UserModules_end|__text_start|_main|_main:
  c                    --> X+0
    05BB: 10       PUSH  X
    05BC: 4F       MOV   X,SP
    05BD: 38 01    ADD   SP,0x1
(0031) 	// Insert your main routine code here.
(0032) 	unsigned char c = 0;
    05BF: 56 00 00 MOV   [X+0],0x0
(0033) 	M8C_EnableGInt;
    05C2: 71 01    OR    F,0x1
(0034) 	UART_EnableInt();
    05C4: 10       PUSH  X
    05C5: 7C 02 EF LCALL _UART_EnableInt
(0035) 	UART_Start(UART_PARITY_NONE);
    05C8: 50 00    MOV   A,0x0
    05CA: 7C 03 0F LCALL _UART_Start
(0036) 	PGA_1_Start(PGA_1_HIGHPOWER);
    05CD: 50 03    MOV   A,0x3
    05CF: 7C 04 65 LCALL PGA_1_Start|_PGA_1_SetPower|_PGA_1_Start|PGA_1_SetPower
(0037) 	ADCINC_Start(ADCINC_HIGHPOWER); // Apply power to the SC Block
    05D2: 50 03    MOV   A,0x3
    05D4: 7C 05 44 LCALL _ADCINC_Start
(0038) 	ADCINC_GetSamples(0);
    05D7: 50 00    MOV   A,0x0
    05D9: 7C 05 6E LCALL _ADCINC_GetSamples
(0039) 	DAC6_Start(DAC6_HIGHPOWER);
    05DC: 50 03    MOV   A,0x3
    05DE: 7C 04 99 LCALL _DAC6_SetPower|_DAC6_Start|DAC6_Start|DAC6_SetPower
(0040) 	PWM8_DisableInt();
    05E1: 7C 04 27 LCALL _PWM8_DisableInt
(0041) 	PWM8_Start();
    05E4: 7C 04 2B LCALL _PWM8_Start
    05E7: 20       POP   X
(0042) 	for(;;)
(0043) 	{
(0044) 		PWM8_WritePulseWidth(m_to_s_mem[0]);
    05E8: 10       PUSH  X
    05E9: 51 2C    MOV   A,[m_to_s_mem]
    05EB: 7C 04 36 LCALL _PWM8_WritePulseWidth
(0045) 		DAC6_WriteBlind(m_to_s_mem[1]); 
    05EE: 51 2D    MOV   A,[m_to_s_mem+1]
    05F0: 7C 04 A0 LCALL _DAC6_WriteBlind
    05F3: 20       POP   X
(0046) 		//if ( DELSIG8_bfStatus ) {
(0047) 		//	DELSIG8_bfStatus = 0;
(0048) 		//	s_to_m_mem[0] = DELSIG8_cResult;
(0049) 		//}
(0050) 		//ADCINC_GetSamples(1);
(0051) 		//while(ADCINC_fIsDataAvailable() == 0);
(0052) 		//s_to_m_mem[0] = ADCINC_bClearFlagGetData(); 
(0053) 	}
    05F4: 8F F3    JMP   0x05E8
(0054) 	//mainloop:
(0055) 	//	UART_SendData(temp++);
(0056) 		//while( ++temp2 );
(0057) 	//goto mainloop;
(0058) }
    05F6: 38 FF    ADD   SP,0xFF
    05F8: 20       POP   X
    05F9: 8F FF    JMP   0x05F9
