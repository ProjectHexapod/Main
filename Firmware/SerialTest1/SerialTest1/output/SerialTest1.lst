FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.1.2306
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#890 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.21
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C24xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 	
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116) 
                                        (0117)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0118)     halt                           ;Stop execution if power falls too low
                                        (0119) 
                                        (0120)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0121)     // call	void_handler
0008: 7E       RETI                     (0122)     reti
                                        (0123) 
                                        (0124)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0125)     // call	void_handler
000C: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   18h                      ;VC3 Interrupt Vector
                                        (0129)     // call	void_handler
0018: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0133)     // call	void_handler
001C: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0137)     // call	void_handler
0020: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0141)     // call	void_handler
0024: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 02 47 LJMP  _UART_TX_ISR       (0145)     ljmp	_UART_TX_ISR
002B: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 02 48 LJMP  _UART_RX_ISR       (0149)     ljmp	_UART_RX_ISR
002F: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0153)     // call	void_handler
0060: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0157)     // call	void_handler
0064: 7E       RETI                     (0158)     reti
0068: 71 10    OR    F,0x10             
                                        (0159) 
                                        (0160) ;-----------------------------------------------------------------------------
                                        (0161) ;  Start of Execution.
                                        (0162) ;-----------------------------------------------------------------------------
                                        (0163) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0164) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0165) ;
                                        (0166) 
                                        (0167) IF	(TOOLCHAIN & HITECH)
                                        (0168)  	AREA PD_startup(CODE, REL, CON)
                                        (0169) ELSE
                                        (0170)     org 68h
                                        (0171) ENDIF
                                        (0172) __Start:
                                        (0173) 
                                        (0174)     ; initialize SMP values for voltage stabilization, if required,
                                        (0175)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0176)     ; least for now. 
                                        (0177)     ;
                                        (0178)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0179)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0180)     M8C_SetBank0
                                        (0181) 
                                        (0182) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0183) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0184)     M8C_EnableWatchDog
                                        (0185) ENDIF
                                        (0186) 
                                        (0187) IF ( SELECT_32K )
                                        (0188)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0189) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0190)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0191) ENDIF
                                        (0192) 
                                        (0193) IF	(TOOLCHAIN & HITECH)
                                        (0194) 	global		__Lstackps
                                        (0195) 	mov     a,low __Lstackps
                                        (0196) 	swap    a,sp
                                        (0197) ELSE
                                        (0198)     ;------------------
                                        (0199)     ; Set up the stack
                                        (0200)     ;------------------
0075: 50 14    MOV   A,0x14             (0201)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0202)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0203) ENDIF
                                        (0204) 
                                        (0205)     ;-----------------------------------------------
                                        (0206)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0207)     ;-----------------------------------------------
                                        (0208) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0209) IF ( SUPPLY_VOLTAGE )         ; 1 means 5.0V
                                        (0210)  IF ( AGND_BYPASS )
                                        (0211)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0212)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0213)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0214)     ; value using the proper trim values.
                                        (0215)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0216)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0217)  ENDIF
                                        (0218) ELSE    ; 3.3 V Operation, not 5.0V
                                        (0219)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0220) ENDIF ;(SUPPLY_VOLTAGE)
                                        (0221) 
007B: 55 F8 00 MOV   [_ramareas_end+228],0x0(0222)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [_ramareas_end+229],0x0(0223)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0224) 
                                        (0225)     ;---------------------------------------
                                        (0226)     ; Initialize Crystal Oscillator and PLL
                                        (0227)     ;---------------------------------------
                                        (0228) 
                                        (0229) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0230)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0231)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0232)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0233)     ; the ECO to stabilize.
                                        (0234)     ;
                                        (0235)     M8C_SetBank1
                                        (0236)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0237)     M8C_SetBank0
                                        (0238)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0239)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0240)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0241) .WaitFor1s:
                                        (0242)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0243)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0244)                                           ;   since interrupts are not globally enabled
                                        (0245) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0246)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0247)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0248)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0249)     M8C_SetBank0
                                        (0250)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0251) 
                                        (0252) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0253) 
                                        (0254) IF ( PLL_MODE )
                                        (0255)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0256)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0257)     ;
                                        (0258)     M8C_SetBank1
                                        (0259)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0260)     M8C_SetBank0
                                        (0261)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0262)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0263) 
                                        (0264) .WaitFor16ms:
                                        (0265)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0266)     jz   .WaitFor16ms
                                        (0267)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0268)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0269)     M8C_SetBank0
                                        (0270) 
                                        (0271) IF      ( WAIT_FOR_32K )
                                        (0272) ELSE ; !( WAIT_FOR_32K )
                                        (0273)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0274)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0275) ENDIF ;(WAIT_FOR_32K)
                                        (0276) ENDIF ;(PLL_MODE)
                                        (0277) 
                                        (0278) 	;-------------------------------------------------------
                                        (0279)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0280)     ;-------------------------------------------------------
                                        (0281) 
                                        (0282)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0283) 
                                        (0284) IF (SYSCLK_SOURCE)
                                        (0285)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0286) ENDIF
                                        (0287)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0288) 
                                        (0289)     ;------------------------
                                        (0290)     ; Close CT leakage path.
                                        (0291)     ;------------------------
008B: 62 71 05 MOV   REG[0x71],0x5      (0292)     mov   reg[ACB00CR0], 05h
008E: 62 75 05 MOV   REG[0x75],0x5      (0293)     mov   reg[ACB01CR0], 05h
                                        (0294) 
                                        (0295)     ;-------------------------
                                        (0296)     ; Load Base Configuration
                                        (0297)     ;-------------------------
                                        (0298)     ; Load global parameter settings and load the user modules in the
                                        (0299)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0300)     ; to minimize start up time; (2) We may still need to play with the
                                        (0301)     ; Sleep Timer.
                                        (0302)     ;
0091: 7C 02 3D LCALL 0x023D             (0303)     lcall LoadConfigInit
                                        (0304) 
                                        (0305)     ;-----------------------------------
                                        (0306)     ; Initialize C Run-Time Environment
                                        (0307)     ;-----------------------------------
                                        (0308) IF ( C_LANGUAGE_SUPPORT )
0094: 50 00    MOV   A,0x0              (0309)     mov  A,0                           ; clear the 'bss' segment to zero
0096: 55 01 02 MOV   [__r0],0x2         (0310)     mov  [__r0],<__bss_start
                                        (0311) BssLoop:
0099: 3C 01 14 CMP   [__r0],0x14        (0312)     cmp  [__r0],<__bss_end
009C: A0 05    JZ    0x00A2             (0313)     jz   BssDone
009E: 3F 01    MVI   [__r0],A           (0314)     mvi  [__r0],A
00A0: 8F F8    JMP   0x0099             (0315)     jmp  BssLoop
                                        (0316) BssDone:
00A2: 50 01    MOV   A,0x1              (0317)     mov  A,>__idata_start              ; copy idata to data segment
00A4: 57 50    MOV   X,0x50             (0318)     mov  X,<__idata_start
00A6: 55 01 00 MOV   [__r0],0x0         (0319)     mov  [__r0],<__data_start
                                        (0320) IDataLoop:
00A9: 3C 01 01 CMP   [__r0],0x1         (0321)     cmp  [__r0],<__data_end
00AC: A0 0B    JZ    0x00B8             (0322)     jz   C_RTE_Done
00AE: 08       PUSH  A                  (0323)     push A
00AF: 28       ROMX                     (0324)     romx
00B0: 3F 01    MVI   [__r0],A           (0325)     mvi  [__r0],A
00B2: 18       POP   A                  (0326)     pop  A
00B3: 75       INC   X                  (0327)     inc  X
00B4: 09 00    ADC   A,0x0              (0328)     adc  A,0
00B6: 8F F2    JMP   0x00A9             (0329)     jmp  IDataLoop
00B8: 71 10    OR    F,0x10             
                                        (0330) 
                                        (0331) C_RTE_Done:
                                        (0332) 
                                        (0333) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0334) 
                                        (0335)     ;-------------------------------
                                        (0336)     ; Voltage Stabilization for SMP
                                        (0337)     ;-------------------------------
                                        (0338) 
                                        (0339) IF ( SUPPLY_VOLTAGE )                  ; 1 Means 5 Volts
                                        (0340) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0341)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0342)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0343)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0344)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0345)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0346)     M8C_SetBank1
                                        (0347)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0348)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0349)     M8C_SetBank0
                                        (0350)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0351)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0352) .WaitFor2ms:
                                        (0353)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0354)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0355) ENDIF ; ( SWITCH_MODE_PUMP ^ 1 )
                                        (0356) ENDIF ; ( SUPPLY_VOLTAGE )
                                        (0357) 
                                        (0358)     ;-------------------------------
                                        (0359)     ; Set Power-On Reset (POR) Level
                                        (0360)     ;-------------------------------
                                        (0361) 
                                        (0362)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH,
                                        (0363)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper
                                        (0364)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. These
                                        (0365)     ;  values should not be changed from the settings here. Failure to follow this instruction could 
                                        (0366)     ;  lead to corruption of PSoC flash.
                                        (0367) 
                                        (0368)     M8C_SetBank1
                                        (0369) 
                                        (0370) IF ( SUPPLY_VOLTAGE )                       ; 1 Means 5 Volts
                                        (0371)  IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )  ;    Also 24MHz?
                                        (0372)                                             ;       no, set midpoint POR in user code, if desired
                                        (0373)  ELSE ; 24HMz                               ;
00BA: 43 E3 20 OR    REG[0xE3],0x20     (0374)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
00BD: 70 EF    AND   F,0xEF             
                                        (0375)  ENDIF ; OSC_CRO_CPU_24MHz
                                        (0376) ENDIF ; 5V
                                        (0377) 
                                        (0378)     M8C_SetBank0
                                        (0379) 
                                        (0380)     ;----------------------------
                                        (0381)     ; Wrap up and invoke "main"
                                        (0382)     ;----------------------------
                                        (0383) 
                                        (0384)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0385)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0386)     ;
00BF: 62 E0 00 MOV   REG[0xE0],0x0      (0387)     mov  reg[INT_MSK0],0
00C2: 71 10    OR    F,0x10             
                                        (0388) 
                                        (0389)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0390)     ;
                                        (0391)     M8C_SetBank1
00C4: 62 E0 03 MOV   REG[0xE0],0x3      (0392)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00C7: 70 EF    AND   F,0xEF             
                                        (0393)     M8C_SetBank0
                                        (0394) 
                                        (0395)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0396)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0397)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0398)     ;
00C9: 62 E2 00 MOV   REG[0xE2],0x0      (0399)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0400) 
                                        (0401) IF	(TOOLCHAIN & HITECH)
                                        (0402) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0403) ELSE                                   ; have been set during the boot process.
                                        (0404) IF ENABLE_LJMP_TO_MAIN
                                        (0405)     ljmp  _main                    ; goto main (no return)
                                        (0406) ELSE
00CC: 7C 03 C0 LCALL _main              (0407)     lcall _main                    ; call main
                                        (0408) .Exit:
00CF: 8F FF    JMP   0x00CF             (0409)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0410) ENDIF
                                        (0411) ENDIF ; TOOLCHAIN
                                        (0412)     ;---------------------------------
                                        (0413)     ; Library Access to Global Parms
                                        (0414)     ;---------------------------------
                                        (0415)     ;
                                        (0416)  bGetPowerSetting:
                                        (0417) _bGetPowerSetting:
                                        (0418)     ; Synthesize the "power setting" value used by chips with SlowIMO mode.
                                        (0419)     ; Returns value of POWER_SETTING in the A register.
                                        (0420)     ; No inputs. No Side Effects.
                                        (0421)     ;
                                        (0422) IF ( SUPPLY_VOLTAGE )            ; 1 means 5.0V
00D1: 50 10    MOV   A,0x10             (0423)     mov   A, POWER_SET_5V0_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0424) ELSE        
                                        (0425)     mov   A, POWER_SET_3V3_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0426) ENDIF
00D3: 7F       RET                      (0427)     ret
                                        (0428) 
                                        (0429) IF	(TOOLCHAIN & HITECH)
                                        (0430) ELSE
                                        (0431)     ;---------------------------------
                                        (0432)     ; Order Critical RAM & ROM AREAs
                                        (0433)     ;---------------------------------
                                        (0434)     ;  'TOP' is all that has been defined so far...
                                        (0435) 
                                        (0436)     ;  ROM AREAs for C CONST, static & global items
                                        (0437)     ;
                                        (0438)     AREA lit               (ROM, REL, CON)   ; 'const' definitions
                                        (0439)     AREA idata             (ROM, REL, CON)   ; Constants for initializing RAM
                                        (0440) __idata_start:
                                        (0441) 
                                        (0442)     AREA func_lit          (ROM, REL, CON)   ; Function Pointers
                                        (0443) __func_lit_start:
                                        (0444) 
                                        (0445)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0446)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0447) 
                                        (0448)     ; CODE segment for general use
                                        (0449)     ;
                                        (0450)     AREA text (ROM, REL, CON)
                                        (0451) __text_start:
                                        (0452) 
                                        (0453)     ; RAM area usage
                                        (0454)     ;
                                        (0455)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0456) __data_start:
                                        (0457) 
                                        (0458)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0459)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0460)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0461) __bss_start:
                                        (0462) ENDIF ; TOOLCHAIN
                                        (0463) ; end of file boot.asm
    00D4: 30       HALT  
    00D5: 30       HALT  
    00D6: 30       HALT  
    00D7: 30       HALT  
    00D8: 30       HALT  
    00D9: 30       HALT  
    00DA: 30       HALT  
    00DB: 30       HALT  
    00DC: 30       HALT  
    00DD: 30       HALT  
    00DE: 30       HALT  
    00DF: 30       HALT  
    00E0: 30       HALT  
    00E1: 30       HALT  
    00E2: 30       HALT  
    00E3: 30       HALT  
    00E4: 30       HALT  
    00E5: 30       HALT  
    00E6: 30       HALT  
    00E7: 30       HALT  
    00E8: 30       HALT  
    00E9: 30       HALT  
    00EA: 30       HALT  
    00EB: 30       HALT  
    00EC: 30       HALT  
    00ED: 30       HALT  
    00EE: 30       HALT  
    00EF: 30       HALT  
    00F0: 30       HALT  
    00F1: 30       HALT  
    00F2: 30       HALT  
    00F3: 30       HALT  
    00F4: 30       HALT  
    00F5: 30       HALT  
    00F6: 30       HALT  
    00F7: 30       HALT  
    00F8: 30       HALT  
    00F9: 30       HALT  
    00FA: 30       HALT  
    00FB: 30       HALT  
    00FC: 30       HALT  
    00FD: 30       HALT  
    00FE: 30       HALT  
    00FF: 30       HALT  
    0100: 30       HALT  
    0101: 30       HALT  
    0102: 30       HALT  
    0103: 30       HALT  
    0104: 30       HALT  
    0105: 30       HALT  
    0106: 30       HALT  
    0107: 30       HALT  
    0108: 30       HALT  
    0109: 30       HALT  
    010A: 30       HALT  
    010B: 30       HALT  
    010C: 30       HALT  
    010D: 30       HALT  
    010E: 30       HALT  
    010F: 30       HALT  
    0110: 30       HALT  
    0111: 30       HALT  
    0112: 30       HALT  
    0113: 30       HALT  
    0114: 30       HALT  
    0115: 30       HALT  
    0116: 30       HALT  
    0117: 30       HALT  
    0118: 30       HALT  
    0119: 30       HALT  
    011A: 30       HALT  
    011B: 30       HALT  
    011C: 30       HALT  
    011D: 30       HALT  
    011E: 30       HALT  
    011F: 30       HALT  
    0120: 30       HALT  
    0121: 30       HALT  
    0122: 30       HALT  
    0123: 30       HALT  
    0124: 30       HALT  
    0125: 30       HALT  
    0126: 30       HALT  
    0127: 30       HALT  
    0128: 30       HALT  
    0129: 30       HALT  
    012A: 30       HALT  
    012B: 30       HALT  
    012C: 30       HALT  
    012D: 30       HALT  
    012E: 30       HALT  
    012F: 30       HALT  
    0130: 30       HALT  
    0131: 30       HALT  
    0132: 30       HALT  
    0133: 30       HALT  
    0134: 30       HALT  
    0135: 30       HALT  
    0136: 30       HALT  
    0137: 30       HALT  
    0138: 30       HALT  
    0139: 30       HALT  
    013A: 30       HALT  
    013B: 30       HALT  
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.1.2306
0151: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) include "m8c.inc"
                                        (0004) ;  Personalization tables 
                                        (0005) export LoadConfigTBL_serialtest1
                                        (0006) AREA psoc_config(rom, rel)
                                        (0007) LoadConfigTBL_serialtest1:
                                        (0008) 	M8C_SetBank0
                                        (0009) ;  Global Register values Bank 0
0153: 62 60 09 MOV   REG[0x60],0x9      (0010) 	mov	reg[60h], 09h		; AnalogColumnInputSelect register (AMX_IN)
0156: 62 66 00 MOV   REG[0x66],0x0      (0011) 	mov	reg[66h], 00h		; AnalogComparatorControl1 register (CMP_CR1)
0159: 62 63 05 MOV   REG[0x63],0x5      (0012) 	mov	reg[63h], 05h		; AnalogReferenceControl register (ARF_CR)
015C: 62 65 00 MOV   REG[0x65],0x0      (0013) 	mov	reg[65h], 00h		; AnalogSyncControl register (ASY_CR)
015F: 62 E6 00 MOV   REG[0xE6],0x0      (0014) 	mov	reg[e6h], 00h		; DecimatorControl_0 register (DEC_CR0)
0162: 62 E7 00 MOV   REG[0xE7],0x0      (0015) 	mov	reg[e7h], 00h		; DecimatorControl_1 register (DEC_CR1)
0165: 62 D6 00 MOV   REG[0xD6],0x0      (0016) 	mov	reg[d6h], 00h		; I2CConfig register (I2CCFG)
0168: 62 B0 01 MOV   REG[0xB0],0x1      (0017) 	mov	reg[b0h], 01h		; Row_0_InputMux register (RDI0RI)
016B: 62 B1 00 MOV   REG[0xB1],0x0      (0018) 	mov	reg[b1h], 00h		; Row_0_InputSync register (RDI0SYN)
016E: 62 B2 00 MOV   REG[0xB2],0x0      (0019) 	mov	reg[b2h], 00h		; Row_0_LogicInputAMux register (RDI0IS)
0171: 62 B3 33 MOV   REG[0xB3],0x33     (0020) 	mov	reg[b3h], 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
0174: 62 B4 33 MOV   REG[0xB4],0x33     (0021) 	mov	reg[b4h], 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
0177: 62 B5 01 MOV   REG[0xB5],0x1      (0022) 	mov	reg[b5h], 01h		; Row_0_OutputDrive_0 register (RDI0SRO0)
017A: 62 B6 02 MOV   REG[0xB6],0x2      (0023) 	mov	reg[b6h], 02h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0024) ;  Instance name UART, User Module UART
                                        (0025) ;       Instance name UART, Block Name RX(DCB03)
017D: 62 2F 00 MOV   REG[0x2F],0x0      (0026) 	mov	reg[2fh], 00h		;UART_RX_CONTROL_REG(DCB03CR0)
0180: 62 2D 00 MOV   REG[0x2D],0x0      (0027) 	mov	reg[2dh], 00h		;UART_(DCB03DR1)
0183: 62 2E 00 MOV   REG[0x2E],0x0      (0028) 	mov	reg[2eh], 00h		;UART_RX_BUFFER_REG (DCB03DR2)
                                        (0029) ;       Instance name UART, Block Name TX(DCB02)
0186: 62 2B 00 MOV   REG[0x2B],0x0      (0030) 	mov	reg[2bh], 00h		;UART_TX_CONTROL_REG(DCB02CR0)
0189: 62 29 00 MOV   REG[0x29],0x0      (0031) 	mov	reg[29h], 00h		;UART_TX_BUFFER_REG (DCB02DR1)
018C: 62 2A 00 MOV   REG[0x2A],0x0      (0032) 	mov	reg[2ah], 00h		;UART_(DCB02DR2)
018F: 71 10    OR    F,0x10             
                                        (0033) 	M8C_SetBank1
                                        (0034) ;  Global Register values Bank 1
0191: 62 61 00 MOV   REG[0x61],0x0      (0035) 	mov	reg[61h], 00h		; AnalogClockSelect1 register (CLK_CR1)
0194: 62 69 00 MOV   REG[0x69],0x0      (0036) 	mov	reg[69h], 00h		; AnalogClockSelect2 register (CLK_CR2)
0197: 62 60 00 MOV   REG[0x60],0x0      (0037) 	mov	reg[60h], 00h		; AnalogColumnClockSelect register (CLK_CR0)
019A: 62 62 00 MOV   REG[0x62],0x0      (0038) 	mov	reg[62h], 00h		; AnalogIOControl_0 register (ABF_CR0)
019D: 62 67 33 MOV   REG[0x67],0x33     (0039) 	mov	reg[67h], 33h		; AnalogLUTControl0 register (ALT_CR0)
01A0: 62 68 00 MOV   REG[0x68],0x0      (0040) 	mov	reg[68h], 00h		; AnalogLUTControl1 register (ALT_CR1)
01A3: 62 63 00 MOV   REG[0x63],0x0      (0041) 	mov	reg[63h], 00h		; AnalogModulatorControl_0 register (AMD_CR0)
01A6: 62 66 00 MOV   REG[0x66],0x0      (0042) 	mov	reg[66h], 00h		; AnalogModulatorControl_1 register (AMD_CR1)
01A9: 62 D1 00 MOV   REG[0xD1],0x0      (0043) 	mov	reg[d1h], 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
01AC: 62 D3 00 MOV   REG[0xD3],0x0      (0044) 	mov	reg[d3h], 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
01AF: 62 D0 00 MOV   REG[0xD0],0x0      (0045) 	mov	reg[d0h], 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
01B2: 62 D2 00 MOV   REG[0xD2],0x0      (0046) 	mov	reg[d2h], 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
01B5: 62 E1 19 MOV   REG[0xE1],0x19     (0047) 	mov	reg[e1h], 19h		; OscillatorControl_1 register (OSC_CR1)
01B8: 62 E2 00 MOV   REG[0xE2],0x0      (0048) 	mov	reg[e2h], 00h		; OscillatorControl_2 register (OSC_CR2)
01BB: 62 DF 02 MOV   REG[0xDF],0x2      (0049) 	mov	reg[dfh], 02h		; OscillatorControl_3 register (OSC_CR3)
01BE: 62 DE 03 MOV   REG[0xDE],0x3      (0050) 	mov	reg[deh], 03h		; OscillatorControl_4 register (OSC_CR4)
01C1: 62 DD 00 MOV   REG[0xDD],0x0      (0051) 	mov	reg[ddh], 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0052) ;  Instance name UART, User Module UART
                                        (0053) ;       Instance name UART, Block Name RX(DCB03)
01C4: 62 2C 05 MOV   REG[0x2C],0x5      (0054) 	mov	reg[2ch], 05h		;UART_RX_FUNC_REG   (DCB03FN)
01C7: 62 2D C1 MOV   REG[0x2D],0xC1     (0055) 	mov	reg[2dh], c1h		;UART_RX_INPUT_REG  (DCB03IN)
01CA: 62 2E 80 MOV   REG[0x2E],0x80     (0056) 	mov	reg[2eh], 80h		;UART_RX_OUTPUT_REG (DCB03OU)
                                        (0057) ;       Instance name UART, Block Name TX(DCB02)
01CD: 62 28 1D MOV   REG[0x28],0x1D     (0058) 	mov	reg[28h], 1dh		;UART_TX_FUNC_REG   (DCB02FN)
01D0: 62 29 01 MOV   REG[0x29],0x1      (0059) 	mov	reg[29h], 01h		;UART_TX_INPUT_REG  (DCB02IN)
01D3: 62 2A 86 MOV   REG[0x2A],0x86     (0060) 	mov	reg[2ah], 86h		;UART_TX_OUTPUT_REG (DCB02OU)
01D6: 70 EF    AND   F,0xEF             
01D8: 70 EF    AND   F,0xEF             
                                        (0061) 	M8C_SetBank0
                                        (0062) ;  Ordered Global Register values
                                        (0063) 	M8C_SetBank0
01DA: 62 00 00 MOV   REG[0x0],0x0       (0064) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
01DD: 71 10    OR    F,0x10             
                                        (0065) 	M8C_SetBank1
01DF: 62 00 01 MOV   REG[0x0],0x1       (0066) 	mov	reg[00h], 01h		; Port_0_DriveMode_0 register (PRT0DM0)
01E2: 62 01 FE MOV   REG[0x1],0xFE      (0067) 	mov	reg[01h], feh		; Port_0_DriveMode_1 register (PRT0DM1)
01E5: 70 EF    AND   F,0xEF             
                                        (0068) 	M8C_SetBank0
01E7: 62 03 FE MOV   REG[0x3],0xFE      (0069) 	mov	reg[03h], feh		; Port_0_DriveMode_2 register (PRT0DM2)
01EA: 62 02 01 MOV   REG[0x2],0x1       (0070) 	mov	reg[02h], 01h		; Port_0_GlobalSelect register (PRT0GS)
01ED: 71 10    OR    F,0x10             
                                        (0071) 	M8C_SetBank1
01EF: 62 02 00 MOV   REG[0x2],0x0       (0072) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
01F2: 62 03 00 MOV   REG[0x3],0x0       (0073) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
01F5: 70 EF    AND   F,0xEF             
                                        (0074) 	M8C_SetBank0
01F7: 62 01 00 MOV   REG[0x1],0x0       (0075) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
01FA: 62 04 00 MOV   REG[0x4],0x0       (0076) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
01FD: 71 10    OR    F,0x10             
                                        (0077) 	M8C_SetBank1
01FF: 62 04 00 MOV   REG[0x4],0x0       (0078) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
0202: 62 05 FF MOV   REG[0x5],0xFF      (0079) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
0205: 70 EF    AND   F,0xEF             
                                        (0080) 	M8C_SetBank0
0207: 62 07 FF MOV   REG[0x7],0xFF      (0081) 	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
020A: 62 06 00 MOV   REG[0x6],0x0       (0082) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
020D: 71 10    OR    F,0x10             
                                        (0083) 	M8C_SetBank1
020F: 62 06 00 MOV   REG[0x6],0x0       (0084) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0212: 62 07 00 MOV   REG[0x7],0x0       (0085) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0215: 70 EF    AND   F,0xEF             
                                        (0086) 	M8C_SetBank0
0217: 62 05 00 MOV   REG[0x5],0x0       (0087) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
021A: 62 08 00 MOV   REG[0x8],0x0       (0088) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
021D: 71 10    OR    F,0x10             
                                        (0089) 	M8C_SetBank1
021F: 62 08 40 MOV   REG[0x8],0x40      (0090) 	mov	reg[08h], 40h		; Port_2_DriveMode_0 register (PRT2DM0)
0222: 62 09 BF MOV   REG[0x9],0xBF      (0091) 	mov	reg[09h], bfh		; Port_2_DriveMode_1 register (PRT2DM1)
0225: 70 EF    AND   F,0xEF             
                                        (0092) 	M8C_SetBank0
0227: 62 0B AF MOV   REG[0xB],0xAF      (0093) 	mov	reg[0bh], afh		; Port_2_DriveMode_2 register (PRT2DM2)
022A: 62 0A 50 MOV   REG[0xA],0x50      (0094) 	mov	reg[0ah], 50h		; Port_2_GlobalSelect register (PRT2GS)
022D: 71 10    OR    F,0x10             
                                        (0095) 	M8C_SetBank1
022F: 62 0A 00 MOV   REG[0xA],0x0       (0096) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0232: 62 0B 00 MOV   REG[0xB],0x0       (0097) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0235: 70 EF    AND   F,0xEF             
                                        (0098) 	M8C_SetBank0
0237: 62 09 00 MOV   REG[0x9],0x0       (0099) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
023A: 70 EF    AND   F,0xEF             
                                        (0100) 	M8C_SetBank0
023C: 7F       RET                      (0101) 	ret
                                        (0102) 
                                        (0103) 
                                        (0104) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.1.2306
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_serialtest1
                                        (0026) export _LoadConfig_serialtest1
                                        (0027) 
                                        (0028) export NO_SHADOW
                                        (0029) export _NO_SHADOW
                                        (0030) 
                                        (0031) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0032) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0033) 
                                        (0034) AREA psoc_config(rom, rel)
                                        (0035) 
                                        (0036) 
                                        (0037) ;---------------------------------------------------------------------------
                                        (0038) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0039) ;                  parameters handled by boot code, like CPU speed). This
                                        (0040) ;                  function can be called from user code, but typically it
                                        (0041) ;                  is only called from boot.
                                        (0042) ;
                                        (0043) ;       INPUTS: None.
                                        (0044) ;      RETURNS: Nothing.
                                        (0045) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0046) ;               In the large memory model currently only the page
                                        (0047) ;               pointer registers listed below are modified.  This does
                                        (0048) ;               not guarantee that in future implementations of this
                                        (0049) ;               function other page pointer registers will not be
                                        (0050) ;               modified.
                                        (0051) ;          
                                        (0052) ;               Page Pointer Registers Modified: 
                                        (0053) ;               CUR_PP
                                        (0054) ;
                                        (0055) _LoadConfigInit:
                                        (0056)  LoadConfigInit:
                                        (0057)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0058)     
023D: 7C 02 41 LCALL 0x0241             (0059) 	lcall	LoadConfig_serialtest1
                                        (0060) 
                                        (0061) 
                                        (0062)     RAM_EPILOGUE RAM_USE_CLASS_4
0240: 7F       RET                      (0063)     ret
                                        (0064) 
                                        (0065) ;---------------------------------------------------------------------------
                                        (0066) ; Load Configuration serialtest1
                                        (0067) ;
                                        (0068) ;    Load configuration registers for serialtest1.
                                        (0069) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0070) ;
                                        (0071) ;       INPUTS: None.
                                        (0072) ;      RETURNS: Nothing.
                                        (0073) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0074) ;               modified as may the Page Pointer registers!
                                        (0075) ;               In the large memory model currently only the page
                                        (0076) ;               pointer registers listed below are modified.  This does
                                        (0077) ;               not guarantee that in future implementations of this
                                        (0078) ;               function other page pointer registers will not be
                                        (0079) ;               modified.
                                        (0080) ;          
                                        (0081) ;               Page Pointer Registers Modified: 
                                        (0082) ;               CUR_PP
                                        (0083) ;
                                        (0084) _LoadConfig_serialtest1:
                                        (0085)  LoadConfig_serialtest1:
                                        (0086)     RAM_PROLOGUE RAM_USE_CLASS_4
0241: 7C 01 51 LCALL 0x0151             (0087)     lcall   LoadConfigTBL_serialtest1            ; Call load config table routine
0244: 70 EF    AND   F,0xEF             
                                        (0088) 
                                        (0089) 
                                        (0090)     M8C_SetBank0                    ; Force return to bank 0
                                        (0091)     RAM_EPILOGUE RAM_USE_CLASS_4
0246: 7F       RET                      (0092)     ret
                                        (0093) 
                                        (0094) 
                                        (0095) 
                                        (0096) AREA InterruptRAM(ram, rel)
                                        (0097) 
                                        (0098) NO_SHADOW:
                                        (0099) _NO_SHADOW:
FILE: lib\uartint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UARTINT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2011/6/28 at 6:10:17
                                        (0005) ;;  Generated by PSoC Designer 5.1.2306
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_TX_ISR
                                        (0022) export  _UART_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_RXBUF_ENABLE)
                                        (0025) export  UART_aRxBuffer
                                        (0026) export _UART_aRxBuffer
                                        (0027) export  UART_bRxCnt
                                        (0028) export _UART_bRxCnt
                                        (0029) export  UART_fStatus
                                        (0030) export _UART_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_RXBUF_ENABLE)
                                        (0040)  UART_fStatus:
                                        (0041) _UART_fStatus:      BLK  1
                                        (0042)  UART_bRxCnt:
                                        (0043) _UART_bRxCnt:       BLK  1
                                        (0044) AREA UART_RAM (RAM, REL, CON)
                                        (0045)  UART_aRxBuffer:
                                        (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _My_C_Function
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
0247: 7E       RETI                     (0115)    reti
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;   NOTE: interrupt service routines must preserve
                                        (0158)    ;   the values of the A and X CPU registers.
                                        (0159)    
                                        (0160)    ; JWHONG: I dropped this into assembly because it's a very critical loop
                                        (0161)    ; and needs to be tight.
                                        (0162)    ; 
0248: 08       PUSH  A                  (0163)    push A
0249: 10       PUSH  X                  (0164)    push X
024A: 5D 2E    MOV   A,REG[0x2E]        (0165)    mov  A,REG[UART_RX_BUFFER_REG]    ; Read the received data
024C: 3C 00 00 CMP   [bytes_received],0x0(0166)    cmp  [_bytes_received], 0x00		 ; Were we waiting for the start of a packet?
024F: A0 0D    JZ    0x025D             (0167)    jz   packet_start
                                        (0168) not_packet_start:
0251: 3C 13 00 CMP   [target_address],0x0(0169)    cmp  [_target_address], 0x00      ; Load the target address
0254: B0 1D    JNZ   0x0272             (0170)    jnz  forward_data				 ; If we are not the targeted device, forward the data
0256: 58 00    MOV   X,[bytes_received] (0171)    mov  X, [_bytes_received]         ; Load bytes received
0258: 79       DEC   X                  (0172)    dec  X                            ; Decrement the received bytes to get the address we want
0259: 54 02    MOV   [X+2],A            (0173)    mov  [X+_received_data_buffer], A ; Save received data
025B: 80 18    JMP   0x0274             (0174)    jmp  check_if_packet_done
                                        (0175) packet_start:
025D: 55 13 0F MOV   [target_address],0xF(0176)    mov  [_target_address], 0x0F
0260: 24 13    AND   [target_address],A (0177)    and  [_target_address], A         ; bottom 4 bits are target address
0262: A0 04    JZ    0x0267             (0178)    jz   no_forward_data_packet_start ; If we're the target, don't forward anything
0264: 78       DEC   A                  (0179)    dec  A                            ; Decrement the address we will forward
0265: 60 29    MOV   REG[0x29],A        (0180)    mov  REG[UART_TX_BUFFER_REG], A   ; Forward the data 
                                        (0181) no_forward_data_packet_start:
0267: 67       ASR   A                  (0182)    asr  A                            ; top 4 bits are expected bytes
0268: 67       ASR   A                  (0183)    asr  A
0269: 67       ASR   A                  (0184)    asr  A
026A: 67       ASR   A                  (0185)    asr  A
026B: 55 12 0F MOV   [expected_bytes],0xF(0186)    mov  [_expected_bytes], 0x0F
026E: 24 12    AND   [expected_bytes],A (0187)    and  [_expected_bytes], A		 ; Save expected bytes
0270: 80 03    JMP   0x0274             (0188)    jmp check_if_packet_done
                                        (0189) forward_data:
0272: 60 29    MOV   REG[0x29],A        (0190)    mov REG[UART_TX_BUFFER_REG], A
                                        (0191) check_if_packet_done:
0274: 51 00    MOV   A,[bytes_received] (0192)    mov  A, [_bytes_received]
0276: 3A 12    CMP   A,[expected_bytes] (0193)    cmp  A, [_expected_bytes]
0278: B0 0C    JNZ   0x0285             (0194)    jnz packet_continues
                                        (0195) packet_end:
027A: 55 00 00 MOV   [bytes_received],0x0(0196)    mov  [_bytes_received], 0x00      ; Re-zero the received bytes
027D: 51 13    MOV   A,[target_address] (0197)    mov  A,[_target_address]          ; If we were selected, call the handler
027F: B0 07    JNZ   0x0287             (0198)    jnz  finish  					 ; If we weren't the target, fuck it
0281: 91 3C    CALL  __UserModules_end|_fullPacketReceived|__text_start|_fullPacketReceived(0199)    call _fullPacketReceived          ; Otherwise call the full packet received handler
0283: 80 03    JMP   0x0287             (0200)    jmp finish
                                        (0201) packet_continues:
0285: 76 00    INC   [bytes_received]   (0202)    inc [_bytes_received]
                                        (0203) finish:
                                        (0204)    ;call Counter8_Stop                ; Stop the idle counter
                                        (0205)    ;mov A, 160                        ; 160 corresponds to two byte reception worth of time
                                        (0206)    ;call Counter8_WritePeriod
                                        (0207)    ;call Counter8_Start                
0287: 18       POP   A                  (0208)    pop A
0288: 20       POP   X                  (0209)    pop X
0289: 7E       RETI                     (0210)    reti
                                        (0211)    
                                        (0212)    ;---------------------------------------------------
                                        (0213)    ; Insert your custom assembly code above this banner
                                        (0214)    ;---------------------------------------------------
                                        (0215)    
                                        (0216)    ;---------------------------------------------------
                                        (0217)    ; Insert a lcall to a C function below this banner
                                        (0218)    ; and un-comment the lines between these banners
                                        (0219)    ;---------------------------------------------------
                                        (0220)    
                                        (0221)    ;PRESERVE_CPU_CONTEXT
                                        (0222)    ;lcall _My_C_Function
                                        (0223)    ;lcall _rx_int_handler
                                        (0224)    ;RESTORE_CPU_CONTEXT
                                        (0225)    
                                        (0226)    ;---------------------------------------------------
                                        (0227)    ; Insert a lcall to a C function above this banner
                                        (0228)    ; and un-comment the lines between these banners
                                        (0229)    ;---------------------------------------------------
                                        (0230)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0231) 
                                        (0232) IF (UART_RXBUF_ENABLE)
                                        (0233)    push A
                                        (0234)    push X
                                        (0235)    
                                        (0236)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0237)       REG_PRESERVE IDX_PP
                                        (0238)    ENDIF
                                        (0239)    
                                        (0240)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
                                        (0241)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
                                        (0242)    push A                                                  ; Store copy for later test
                                        (0243)                                                            ; IF real RX interrupt
                                        (0244)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
                                        (0245)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
                                        (0246)    pop  A                                                  ; Restore stack
                                        (0247)    jmp  .RESTORE_IDX_PP
                                        (0248) 
                                        (0249) .UARTRX_ReadRx:
                                        (0250)    pop  A                                                  ; Restore status flags
                                        (0251)                                                            ; IF there is no error, get data
                                        (0252)                                                            ; Check for parity or framing error
                                        (0253)    and  A,UART_RX_ERROR
                                        (0254)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0255) 
                                        (0256)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
                                        (0257)    tst  REG[UART_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
                                        (0258)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
                                        (0259)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0260) 
                                        (0261)                                                            ; Disable and re-enable RX to reset after
                                        (0262)                                                            ; framing error.
                                        (0263)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
                                        (0264)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
                                        (0265)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0266) 
                                        (0267) 
                                        (0268) .UARTRX_NO_ERROR:
                                        (0269)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                        (0270) 
                                        (0271)                                                            ; IF buffer not full
                                        (0272)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
                                        (0273)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0274) 
                                        (0275)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
                                        (0276)    jnz  .UARTRX_CHK_BACKSPACE
                                        (0277)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
                                        (0278) 
                                        (0279) 
                                        (0280) 
                                        (0281)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (0282)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0283)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
                                        (0284)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0285)    jmp  .RESTORE_IDX_PP
                                        (0286) 
                                        (0287) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0288) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                        (0289)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                        (0290)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0291)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                        (0292)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0293)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                        (0294)    jmp  .RESTORE_IDX_PP
                                        (0295) ENDIF                                                      ; 
                                        (0296) 
                                        (0297) .UARTRX_IGNORE:
                                        (0298) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
                                        (0299)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
                                        (0300)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                        (0301) ENDIF
                                        (0302) 
                                        (0303) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0304) 	
                                        (0305)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
                                        (0306)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
                                        (0307)    jc   .UARTRX_ISR_GETDATA
                                        (0308)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0309)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
                                        (0310)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0311)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
                                        (0312)    jmp  .RESTORE_IDX_PP
                                        (0313) 
                                        (0314) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0315)                                                            ; X is already loaded with pointer
                                        (0316)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0317)    mov  [X+UART_aRxBuffer],A                               ; store data in array
                                        (0318)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0319)    inc  X                                                  ; Inc the pointer
                                        (0320)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
                                        (0321)                                                            ; ENDIF max string size
                                        (0322) .RESTORE_IDX_PP:
                                        (0323)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0324)       REG_RESTORE IDX_PP
                                        (0325)    ENDIF
                                        (0326) 
                                        (0327) .END_UARTRX_ISR:
                                        (0328)    pop  X
                                        (0329)    pop  A
                                        (0330) 
                                        (0331) ENDIF
                                        (0332) 
                                        (0333) UART_RX_ISR_END:
028A: 7E       RETI                     (0334)    reti
                                        (0335) 
                                        (0336) ; end of file UARTINT.asm
                                        (0337) 
FILE: lib\uart.asm                      (0001) ;;*****************************************************************************
028B: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
028E: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0003) ;;  Filename:   UART.asm
                                        (0004) ;;  Version: 5.3, Updated on 2011/6/28 at 6:10:17
                                        (0005) ;;  Generated by PSoC Designer 5.1.2306
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_SetTxIntMode
                                        (0041) export _UART_SetTxIntMode
                                        (0042) export  UART_EnableInt
                                        (0043) export _UART_EnableInt
                                        (0044) export  UART_DisableInt
                                        (0045) export _UART_DisableInt
                                        (0046) 
                                        (0047) export  UART_Start
                                        (0048) export _UART_Start
                                        (0049) export  UART_Stop
                                        (0050) export _UART_Stop
                                        (0051) export  UART_SendData
                                        (0052) export _UART_SendData
                                        (0053) export  UART_bReadTxStatus
                                        (0054) export _UART_bReadTxStatus
                                        (0055) export  UART_bReadRxData
                                        (0056) export _UART_bReadRxData
                                        (0057) export  UART_bReadRxStatus
                                        (0058) export _UART_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_IntCntl
                                        (0061) export _UART_IntCntl
                                        (0062) 
                                        (0063) export  UART_TxIntMode
                                        (0064) export _UART_TxIntMode
                                        (0065) 
                                        (0066) export  UART_PutSHexByte
                                        (0067) export _UART_PutSHexByte
                                        (0068) export  UART_PutSHexInt
                                        (0069) export _UART_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_CPutString
                                        (0072) export _UART_CPutString
                                        (0073) export  UART_PutString
                                        (0074) export _UART_PutString
                                        (0075) export  UART_PutChar
                                        (0076) export _UART_PutChar
                                        (0077) export  UART_Write
                                        (0078) export _UART_Write
                                        (0079) export  UART_CWrite
                                        (0080) export _UART_CWrite
                                        (0081) 
                                        (0082) export  UART_cGetChar
                                        (0083) export _UART_cGetChar
                                        (0084) export  UART_cReadChar
                                        (0085) export _UART_cReadChar
                                        (0086) export  UART_iReadChar
                                        (0087) export _UART_iReadChar
                                        (0088) export  UART_PutCRLF
                                        (0089) export _UART_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_RXBUF_ENABLE)
                                        (0092) export  UART_CmdReset
                                        (0093) export _UART_CmdReset
                                        (0094) export  UART_bCmdCheck
                                        (0095) export _UART_bCmdCheck
                                        (0096) export  UART_bCmdLength
                                        (0097) export _UART_bCmdLength
                                        (0098) export  UART_bErrCheck
                                        (0099) export _UART_bErrCheck
                                        (0100) 
                                        (0101) export  UART_szGetParam
                                        (0102) export _UART_szGetParam
                                        (0103) export  UART_szGetRestOfParams
                                        (0104) export _UART_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_ReadTxStatus
                                        (0114) export _bUART_ReadTxStatus
                                        (0115) export  bUART_ReadRxData
                                        (0116) export _bUART_ReadRxData
                                        (0117) export  bUART_ReadRxStatus
                                        (0118) export _bUART_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_EnableInt:
                                        (0177) _UART_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
0291: 7F       RET                      (0182)    ret
0292: 41 E1 FB AND   REG[0xE1],0xFB     
0295: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_DisableInt:
                                        (0209) _UART_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
0298: 7F       RET                      (0214)    ret
0299: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_SetTxIntMode:
                                        (0245) _UART_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
029B: 21 01    AND   A,0x1              (0248)    and   A, UART_INT_MODE_TX_COMPLETE
029D: A0 07    JZ    0x02A5             (0249)    jz    .SetModeRegEmpty
029F: 43 28 10 OR    REG[0x28],0x10     (0250)    or    REG[UART_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
02A2: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
02A4: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
02A5: 41 28 EF AND   REG[0x28],0xEF     (0256)    and   REG[UART_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
02A8: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
02AA: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_Start:
                                        (0286) _UART_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
02AB: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
02AD: 60 2B    MOV   REG[0x2B],A        (0291)    mov   REG[UART_TX_CONTROL_REG], A
02AF: 60 2F    MOV   REG[0x2F],A        (0292)    mov   REG[UART_RX_CONTROL_REG], A
                                        (0293) IF ( UART_RXBUF_ENABLE )
                                        (0294)    call  _UART_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
02B1: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_Stop:
                                        (0323) _UART_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
02B2: 41 2B FE AND   REG[0x2B],0xFE     (0325)    and   REG[UART_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
02B5: 41 2F FE AND   REG[0x2F],0xFE     (0326)    and   REG[UART_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
02B8: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_SendData:
                                        (0354) _UART_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
02B9: 60 29    MOV   REG[0x29],A        (0356)    mov REG[UART_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
02BB: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_bReadTxStatus:
                                        (0385) _UART_bReadTxStatus:
                                        (0386)  bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0387) _bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
02BC: 5D 2B    MOV   A,REG[0x2B]        (0389)    mov A,  REG[UART_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
02BE: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_bReadRxData:
                                        (0418) _UART_bReadRxData:
                                        (0419)  bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0420) _bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
02BF: 5D 2E    MOV   A,REG[0x2E]        (0422)    mov A, REG[UART_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
02C1: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_bReadRxStatus:
                                        (0452) _UART_bReadRxStatus:
                                        (0453)  bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0454) _bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
02C2: 5D 2F    MOV   A,REG[0x2F]        (0456)    mov A,  REG[UART_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
02C4: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_TxIntMode:
                                        (0486) _UART_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
02C5: 21 01    AND   A,0x1              (0489)    and  A,UART_INT_MODE_TX_COMPLETE
02C7: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
02C9: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_INT_MODE_TX_COMPLETE
02CB: A0 06    JZ    0x02D2             (0492)    jz   .SetTxCmpMode
                                        (0493) 
02CD: 41 28 EF AND   REG[0x28],0xEF     (0494)    and  reg[UART_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
02D0: 80 04    JMP   0x02D5             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
02D2: 43 28 10 OR    REG[0x28],0x10     (0498)    or   reg[UART_TX_FUNC_REG],0x10
02D5: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
02D7: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_IntCntl:
                                        (0533) _UART_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
02D8: 08       PUSH  A                  (0536)    push A
02D9: 21 01    AND   A,0x1              (0537)    and  A,UART_ENABLE_RX_INT
02DB: A0 06    JZ    0x02E2             (0538)    jz   .DisRxInt
02DD: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
02E0: 80 04    JMP   0x02E5             (0541)    jmp  .CheckTxInt
02E2: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
02E5: 18       POP   A                  (0547)    pop  A
02E6: 21 02    AND   A,0x2              (0548)    and  A,UART_ENABLE_TX_INT
02E8: A0 06    JZ    0x02EF             (0549)    jz   .DisTxInt
02EA: 43 E1 04 OR    REG[0xE1],0x4      
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
02ED: 80 04    JMP   0x02F2             (0552)    jmp  .End_IntCntl
02EF: 41 E1 FB AND   REG[0xE1],0xFB     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
02F2: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_PutSHexByte:
                                        (0599) _UART_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
0303: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
0304: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
0305: 67       ASR   A                  (0603)    asr   A
0306: 67       ASR   A                  (0604)    asr   A
0307: 67       ASR   A                  (0605)    asr   A
0308: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
030A: FF E7    INDEX 0x02F3             (0607)    index UART_HEX_STR                  ; Get Hex value
030C: 90 0F    CALL  _UART_PutChar      (0608)    call  UART_PutChar                  ; Write data to screen
030E: 18       POP   A                  (0609)    pop   A                             ; Restore value
030F: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
0311: FF E0    INDEX 0x02F3             (0611)    index UART_HEX_STR                  ; Get Hex value
0313: 90 08    CALL  _UART_PutChar      (0612)    call  UART_PutChar                  ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
0315: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_PutSHexInt:
                                        (0643) _UART_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
0316: 4B       SWAP  A,X                (0645)    swap  A,X
0317: 9F EA    CALL  _UART_PutSHexByte  (0646)    call  UART_PutSHexByte              ; Print MSB
0319: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
031A: 9F E7    CALL  _UART_PutSHexByte  (0648)    call  UART_PutSHexByte              ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
031C: 7F       RET                      (0650)    ret
031D: 49 2B 10 TST   REG[0x2B],0x10     
0320: AF FC    JZ    _UART_PutChar      
0322: 60 29    MOV   REG[0x29],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_TX_CONTROL_REG], UART_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_TX_BUFFER_REG], @Source          ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_PutChar:
                                        (0684) _UART_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
0324: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_cGetChar:
                                        (0718) _UART_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
0325: 49 2F 08 TST   REG[0x2F],0x8      (0720)    tst REG[UART_RX_CONTROL_REG],UART_RX_REG_FULL    ; Check if a character is ready
0328: AF FC    JZ    _UART_cGetChar     (0721)    jz  UART_cGetChar                             ; If not loop
032A: 5D 2E    MOV   A,REG[0x2E]        (0722)    mov A, REG[UART_RX_BUFFER_REG]                ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
032C: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_cReadChar:
                                        (0753) _UART_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
032D: 5D 2F    MOV   A,REG[0x2F]        (0755)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
032F: 08       PUSH  A                  (0756)    push A
0330: 21 08    AND   A,0x8              (0757)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
0332: B0 04    JNZ   0x0337             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
0334: 18       POP   A                  (0759)    pop  A
0335: 80 0B    JMP   0x0341             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
0337: 5D 2E    MOV   A,REG[0x2E]        (0763)    mov  A,REG[UART_RX_BUFFER_REG ]          
0339: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
033A: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
033B: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_RX_PARITY_ERROR | UART_RX_FRAMING_ERROR)
033D: B0 03    JNZ   0x0341             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
033F: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
0340: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
0341: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
0343: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_iReadChar:
                                        (0814) _UART_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
0344: 5D 2F    MOV   A,REG[0x2F]        (0816)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
0346: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_RX_ERROR|UART_RX_REG_FULL)
0348: 08       PUSH  A                  (0819)    push A
0349: 21 08    AND   A,0x8              (0820)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
034B: B0 07    JNZ   0x0353             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
034D: 18       POP   A                  (0822)    pop  A
034E: 29 01    OR    A,0x1              (0823)    or   A,UART_RX_NO_DATA                                  ; Add no data flag
0350: 4B       SWAP  A,X                (0824)    swap A,X
0351: 80 07    JMP   0x0359             (0825)    jmp  End_UART_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
0353: 18       POP   A                  (0828)    pop  A
0354: 21 E0    AND   A,0xE0             (0829)    and  A,UART_RX_ERROR
0356: 4B       SWAP  A,X                (0830)    swap A,X
0357: 5D 2E    MOV   A,REG[0x2E]        (0831)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
0359: 7F       RET                      (0836)    ret
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_PutString:
                                        (0867) _UART_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
035A: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
035C: A0 06    JZ    0x0363             (0872)    jz    End_PutString                           ; Check for end of string
035E: 9F BD    CALL  _UART_PutChar      (0873)    call  UART_PutChar                            ; Send character to Tx port
0360: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
0361: 8F F8    JMP   _UART_PutString    (0875)    jmp   .PutStringLoop                          ; Get next character
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
0363: 7F       RET                      (0879)    ret
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_Write:
                                        (0914) _UART_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
0364: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
0365: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
0367: A0 13    JZ    0x037B             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
0369: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
036B: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
036D: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
036F: 49 2B 10 TST   REG[0x2B],0x10     
0372: AF FC    JZ    0x036F             
0374: 60 29    MOV   REG[0x29],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
0376: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
0377: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
0379: 8F EB    JMP   0x0365             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
037B: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_CWrite:
                                        (0975) _UART_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
037C: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
037D: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
0380: B0 06    JNZ   0x0387             (0980)    jnz   .CW_WRITEIT
0382: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
0385: A0 1D    JZ    0x03A3             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
0387: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
0388: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
038A: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
038C: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
038D: 49 2B 10 TST   REG[0x2B],0x10     
0390: AF FC    JZ    0x038D             
0392: 60 29    MOV   REG[0x29],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
0394: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
0395: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
0398: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
039B: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
039E: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
03A1: 8F DB    JMP   0x037D             (0995)    jmp   .CW_Loop
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
03A3: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_CPutString:
                                        (1027) _UART_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
03A4: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
03A5: 10       PUSH  X                  (1030)    push  X
03A6: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
03A7: A0 0B    JZ    0x03B3             (1032)    jz    .End_CPutString
03A9: 9F 72    CALL  _UART_PutChar      (1033)    call  UART_PutChar                            ; Print character
03AB: 20       POP   X                  (1034)    pop   X
03AC: 18       POP   A                  (1035)    pop   A
03AD: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
03AE: DF F5    JNC   _UART_CPutString   (1037)    jnc   UART_CPutString                         ; Check for carry
03B0: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
03B1: 8F F2    JMP   _UART_CPutString   (1039)    jmp   UART_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
03B3: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
03B5: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_PutCRLF:
                                        (1071) _UART_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
03B6: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
03B8: 9F 63    CALL  _UART_PutChar      (1074)    call UART_PutChar
03BA: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
03BC: 9F 5F    CALL  _UART_PutChar      (1076)    call UART_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
03BE: 7F       RET                      (1078)    ret
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_CmdReset:
                                        (1119) _UART_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_aRxBuffer
                                        (1122)    mov [UART_aRxBuffer], 0x00
                                        (1123)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1124)    mov [UART_bRxCnt], 0x00
                                        (1125)    and [UART_fStatus], 0x00
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
                                        (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1129)    ret
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_bCmdCheck:
                                        (1162) _UART_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1165)    mov A,  [UART_fStatus]
                                        (1166)    and A, UART_RX_BUF_CMDTERM                    ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1168)    ret
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_bErrCheck:
                                        (1206) _UART_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1209)    mov A,  [UART_fStatus]
                                        (1210)    and A, UART_RX_BUF_ERROR                      ; Mask off Error status
                                        (1211)    and [UART_fStatus], ~UART_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1213)    ret
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_bCmdLength:
                                        (1241) _UART_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1244)    mov A,  [UART_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1246)    ret
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_szGetParam:
                                        (1299) _UART_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
                                        (1304)    mov   A, <UART_aRxBuffer                 ; Get address to receive buffer
                                        (1305)    add   A, [ptrParam]                      ; Add string offset
                                        (1306)    mov   X, A
                                        (1307)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (1308)    mov   A, [X]                             ; Get character pointed by X
                                        (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
                                        (1310)    push  X                                  ;       Yes, Save LSB of current pointer
                                        (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
                                        (1315)    cmp   A, UART_DELIMITER                  ; Do we have a delimiter?
                                        (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
                                        (1317)    inc   X                                  ;   Yes, Increment both index and...
                                        (1318)    inc   [ptrParam]                         ;          the stored pointer.
                                        (1319)    mov   A, [X]                             ; Get character pointed by X
                                        (1320)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; End of buffer?
                                        (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
                                        (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
                                        (1326)    mov   [X], 0x00                          ; Make sure string is zero
                                        (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
                                        (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
                                        (1333)    inc   X                                  ; Advance pointers.
                                        (1334)    inc   [ptrParam]
                                        (1335)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1336)    jz    .TerminateString
                                        (1337)    mov   A, [X]                             ; Get next character
                                        (1338)    jz    .End_GetNextParam
                                        (1339)    cmp   A, UART_DELIMITER                  ; Check if we have a delimiter
                                        (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
                                        (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
                                        (1342)    inc   [ptrParam]
                                        (1343)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
                                        (1345)    mov   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
                                        (1348)    pop   X
                                        (1349)    push  X
                                        (1350)    cmp   [X], 0x00
                                        (1351)    jnz   .NotNullString
                                        (1352)    pop   X
                                        (1353)    mov   X, 0x00
                                        (1354)    mov   A, X
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
                                        (1360)    pop  X
                                        (1361)    mov  A, >UART_aRxBuffer                  ; Return pointer
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1364)    ret
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_szGetRestOfParams:
                                        (1393) _UART_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
                                        (1396)    mov  A, <UART_aRxBuffer                  ; Get address to receive buffer
                                        (1397)    add  A, [ptrParam]                       ; Add string offset
                                        (1398)    mov  X,A
                                        (1399)    mov  A,>UART_aRxBuffer                   ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART.asm
FILE: C:\Users\jwhong\DOCUME~1\PSOCDE~1.1PR\SERIAL~1\SERIAL~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) 
(0008) unsigned char target_address;
(0009) unsigned char bytes_received = 0;
(0010) unsigned char expected_bytes;
(0011) unsigned char received_data_buffer[16];
(0012) 
(0013) void fullPacketReceived(void)
(0014) {
(0015) 	return;
__UserModules_end|_fullPacketReceived|__text_start|_fullPacketReceived:
    03BF: 7F       RET   
(0016) }
(0017) 
(0018) void main(void)
(0019) {
_main:
  temp2                --> X+1
  temp                 --> X+0
    03C0: 10       PUSH  X
    03C1: 4F       MOV   X,SP
    03C2: 38 03    ADD   SP,0x3
(0020) 	// Insert your main routine code here.
(0021) 	unsigned char temp = 0;
    03C4: 56 00 00 MOV   [X+0],0x0
(0022) 	volatile unsigned short temp2 = 0;
    03C7: 56 02 00 MOV   [X+2],0x0
    03CA: 56 01 00 MOV   [X+1],0x0
(0023) 	M8C_EnableGInt ; // Uncomment this line to enable Global Interrupts
    03CD: 71 01    OR    F,0x1
(0024) 	UART_EnableInt();
    03CF: 10       PUSH  X
    03D0: 7C 02 8B LCALL _UART_EnableInt
    03D3: 20       POP   X
(0025) 	UART_Start(UART_PARITY_NONE);
    03D4: 10       PUSH  X
    03D5: 50 00    MOV   A,0x0
    03D7: 7C 02 AB LCALL _UART_Start
    03DA: 20       POP   X
(0026) 	//Counter8_EnableInt();
(0027) 	//Counter8_Start();
(0028) 	while(1);
    03DB: 8F FF    JMP   0x03DB
(0029) 	//mainloop:
(0030) 	//	UART_SendData(temp++);
(0031) 		//while( ++temp2 );
(0032) 	//goto mainloop;
(0033) }
    03DD: 38 FD    ADD   SP,0xFD
    03DF: 20       POP   X
    03E0: 8F FF    JMP   0x03E0
